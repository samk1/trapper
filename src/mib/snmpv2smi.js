/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[5,7,10,11,23,29,41,42,50,80,103,104,126,171,172,173,174,175,176,177,178,179,180,208,215,216,217,218,228,238,244,248,250,260],$V2=[1,7],$V3=[1,16],$V4=[1,15],$V5=[11,91],$V6=[5,7,10,11,23,29,41,42,50,80,87,103,104,121,126,171,172,173,174,175,176,177,178,179,180,208,211,212,215,216,217,218,228,233,238,244,248,250,260],$V7=[11,29,80,91],$V8=[1,31],$V9=[1,32],$Va=[1,37],$Vb=[1,48],$Vc=[1,50],$Vd=[1,51],$Ve=[1,52],$Vf=[1,53],$Vg=[1,54],$Vh=[1,55],$Vi=[1,56],$Vj=[1,57],$Vk=[1,58],$Vl=[1,59],$Vm=[1,64],$Vn=[7,10,11,23,29,41,42,80,87,103,104,121,171,172,173,174,175,176,177,178,179,180,208,211,212,215,216,217,218,228,233,250,260],$Vo=[2,176],$Vp=[1,72],$Vq=[10,11,171,172,173,174,175,176,177,178,179,180],$Vr=[1,103],$Vs=[2,32],$Vt=[1,117],$Vu=[1,116],$Vv=[1,115],$Vw=[1,114],$Vx=[1,120],$Vy=[1,119],$Vz=[1,118],$VA=[1,121],$VB=[1,122],$VC=[1,123],$VD=[1,124],$VE=[1,125],$VF=[1,138],$VG=[1,127],$VH=[1,128],$VI=[1,129],$VJ=[1,130],$VK=[1,131],$VL=[1,132],$VM=[1,133],$VN=[1,134],$VO=[1,135],$VP=[1,136],$VQ=[1,137],$VR=[10,11,23,27,29,36,171,172,173,174,175,176,177,178,179,180],$VS=[1,140],$VT=[11,24,171,172,173,174,175,176,177,178,179,180],$VU=[23,27,29],$VV=[11,23,171,172,173,174,175,176,177,178,179,180],$VW=[11,171,172,173,174,175,176,177,178,179,180],$VX=[7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,215,216,217,218,228,250,260],$VY=[2,59],$VZ=[1,153],$V_=[1,152],$V$=[1,149],$V01=[1,165],$V11=[1,176],$V21=[1,178],$V31=[10,11,23,171,172,173,174,175,176,177,178,179,180],$V41=[1,213],$V51=[1,220],$V61=[1,217],$V71=[1,216],$V81=[1,206],$V91=[1,214],$Va1=[1,215],$Vb1=[1,218],$Vc1=[1,219],$Vd1=[7,10,11,23,29,41,42,80,103,104,137,138,171,172,173,174,175,176,177,178,179,180,208,215,216,217,218,228,250,260],$Ve1=[1,226],$Vf1=[1,235],$Vg1=[1,239],$Vh1=[1,236],$Vi1=[1,237],$Vj1=[1,245],$Vk1=[1,247],$Vl1=[1,255],$Vm1=[11,43,44,45,46,47,48,50,76,77,82,84,85,90,97,171,172,173,174,175,176,177,178,179,180],$Vn1=[1,263],$Vo1=[216,217,218],$Vp1=[7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,211,215,216,217,218,228,250,260],$Vq1=[29,80],$Vr1=[41,42],$Vs1=[41,42,87,121],$Vt1=[1,301],$Vu1=[1,305],$Vv1=[1,306],$Vw1=[41,42,81],$Vx1=[7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,211,215,216,217,218,221,223,228,250,260],$Vy1=[2,248],$Vz1=[1,330],$VA1=[1,338],$VB1=[2,253],$VC1=[11,15,17,43,44,45,46,47,48,50,76,77,82,84,85,90,97,171,172,173,174,175,176,177,178,179,180],$VD1=[1,352],$VE1=[1,373],$VF1=[1,384],$VG1=[7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,215,216,217,218,228,250,254,260],$VH1=[1,395],$VI1=[1,401],$VJ1=[1,399],$VK1=[1,400],$VL1=[1,407],$VM1=[7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,215,216,217,218,228,238,250,260],$VN1=[1,417],$VO1=[1,421],$VP1=[7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,209,215,216,217,218,228,250,260],$VQ1=[7,10,11,23,29,41,42,50,80,103,104,171,172,173,174,175,176,177,178,179,180,208,215,216,217,218,228,238,248,250,260],$VR1=[1,444],$VS1=[1,443],$VT1=[2,282],$VU1=[1,450],$VV1=[1,463],$VW1=[2,256],$VX1=[1,471],$VY1=[2,313],$VZ1=[1,480],$V_1=[2,264],$V$1=[1,486],$V02=[1,487],$V12=[1,488],$V22=[208,216,217,218,228,250,260],$V32=[1,492],$V42=[208,216,217,218,228,260],$V52=[7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,215,216,217,218,228,250,254,257,260],$V62=[208,228,260],$V72=[208,228];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module_definition":3,"module_identifier":4,"DEFINITIONS":5,"tag_default":6,"DEFINITION":7,"BEGIN":8,"module_body":9,"END":10,"IDENTIFIER_STRING":11,"object_identifier_value":12,"module_reference":13,"DOT":14,"EXPLICIT":15,"TAGS":16,"IMPLICIT":17,"export_list":18,"import_list":19,"assignment_list":20,"EXPORTS":21,"symbol_list":22,"SEMI_COLON":23,"IMPORTS":24,"symbols_from_module_list":25,"symbols_from_module":26,"FROM":27,"symbol":28,"COMMA":29,"defined_macro_name":30,"assignment":31,"macro_definition":32,"type_assignment":33,"value_assignment":34,"macro_reference":35,"MACRO":36,"macro_body":37,"macro_body_element_list":38,"macro_body_element":39,"LEFT_PAREN":40,"RIGHT_PAREN":41,"VERTICAL_BAR":42,"INTEGER":43,"REAL":44,"BOOLEAN":45,"NULL":46,"BIT":47,"OCTET":48,"STRING":49,"OBJECT":50,"IDENTIFIER":51,"QUOTED_STRING":52,"type":53,"builtin_type":54,"defined_type":55,"defined_macro_type":56,"value_or_constraint_list":57,"null_type":58,"boolean_type":59,"real_type":60,"integer_type":61,"object_identifier_type":62,"string_type":63,"bit_string_type":64,"bits_type":65,"sequence_type":66,"sequence_of_type":67,"set_type":68,"set_of_type":69,"choice_type":70,"enumerated_type":71,"selection_type":72,"tagged_type":73,"any_type":74,"constraint_list_container":75,"BITS":76,"SEQUENCE":77,"LEFT_BRACE":78,"element_type_list":79,"RIGHT_BRACE":80,"OF":81,"SET":82,"size_constraint":83,"CHOICE":84,"ENUMERATED":85,"named_number_list_container":86,"LESS_THAN":87,"tag":88,"explicit_or_implicit_tag":89,"LEFT_BRACKET":90,"NUMBER_STRING":91,"RIGHT_BRACKET":92,"class":93,"UNIVERSAL":94,"APPLICATION":95,"PRIVATE":96,"ANY":97,"DEFINED":98,"BY":99,"element_type":100,"optional_or_default_element":101,"COMPONENTS":102,"OPTIONAL":103,"DEFAULT":104,"value":105,"named_number_list":106,"named_number":107,"number":108,"MINUS":109,"defined_value":110,"constraint_list":111,"constraint":112,"value_constraint":113,"alphabet_constraint":114,"contained_type_constraint":115,"inner_type_constraint":116,"value_constraint_list_container":117,"value_constraint_list":118,"lower_end_point":119,"value_range":120,"DOUBLE_DOT":121,"upper_end_point":122,"MIN":123,"MAX":124,"SIZE":125,"INCLUDES":126,"WITH":127,"COMPONENT":128,"components_list_container":129,"component_constraint_list":130,"component_constraint":131,"components_list_tail":132,"TRIPLE_DOT":133,"component_list_tail":134,"component_value_presence":135,"component_presence":136,"PRESENT":137,"ABSENT":138,"builtin_value":139,"null_value":140,"boolean_value":141,"special_real_value":142,"number_value":143,"binary_value":144,"hexadecimal_value":145,"string_value":146,"bit_or_object_identifier_value":147,"bollean_value":148,"TRUE":149,"FALSE":150,"PLUS_INFINITY":151,"MINUS_INFINITY":152,"BINARY_STRING":153,"HEXADECIMAL_STRING":154,"name_value_list_container":155,"bit_value":156,"name_value_list":157,"name_or_number":158,"comma_opt":159,"name_and_number":160,"snmp_module_identity_macro_type":161,"snmp_object_identity_macro_type":162,"snmp_object_type_macro_type":163,"snmp_notification_type_macro_type":164,"snmp_trap_type_macro_type":165,"snmp_textual_convention_macro_type":166,"snmp_object_group_macro_type":167,"snmp_notification_group_macro_type":168,"snmp_module_compliance_macro_type":169,"snmp_agent_capabilities_macro_type":170,"MODULE_IDENTITY":171,"OBJECT_IDENTITY":172,"OBJECT_TYPE":173,"NOTIFICATION_TYPE":174,"TRAP_TYPE":175,"TEXTUAL_CONVENTION":176,"OBJECT_GROUP":177,"NOTIFICATION_GROUP":178,"MODULE_COMPLIANCE":179,"AGENT_CAPABILITIES":180,"snmp_update_part":181,"snmp_organization_part":182,"snmp_contact_part":183,"snmp_descr_part":184,"snmp_revision_part_list":185,"snmp_revision_part":186,"snmp_status_part":187,"snmp_refer_part":188,"snmp_syntax_part":189,"snmp_units_part_opt":190,"snmp_access_part":191,"snmp_descr_part_opt":192,"snmp_refer_part_opt":193,"snmp_index_part_opt":194,"snmp_def_val_part_opt":195,"snmp_objects_part_opt":196,"snmp_enterprise_part":197,"snmp_var_part_opt":198,"snmp_display_part_opt":199,"snmp_objects_part":200,"snmp_notifications_part":201,"snmp_module_part_list":202,"snmp_product_release_part":203,"snmp_module_support_part_list":204,"LAST_UPDATED":205,"ORGANIZATION":206,"CONTACT_INFO":207,"DESCRIPTION":208,"REVISION":209,"STATUS":210,"REFERENCE":211,"SYNTAX":212,"snmp_syntax_part_opt":213,"snmp_units_part":214,"UNITS":215,"ACCESS":216,"MAX_ACCESS":217,"MIN_ACCESS":218,"snmp_access_part_opt":219,"snmp_index_part":220,"INDEX":221,"index_value_list":222,"AUGMENTS":223,"index_value":224,"IMPLIED":225,"index_type":226,"snmp_def_val_part":227,"DEFVAL":228,"OBJECTS":229,"value_list":230,"ENTERPRISE":231,"snmp_var_part":232,"VARIABLES":233,"snmp_display_part":234,"DISPLAY_HINT":235,"NOTIFICATIONS":236,"snmp_module_part":237,"MODULE":238,"snmp_module_import_opt":239,"snmp_mandatory_part_opt":240,"snmp_compliance_part_list":241,"snmp_module_import":242,"snmp_mandatory_part":243,"MANDATORY_GROUPS":244,"snmp_compliance_part":245,"compliance_group":246,"compliance_object":247,"GROUP":248,"snmp_write_syntax_part_opt":249,"WRITE_SYTNAX":250,"snmp_product_release_part_opt":251,"PRODUCT_RELEASE":252,"snmp_module_support_part":253,"SUPPORTS":254,"snmp_variation_part_list":255,"snmp_variation_part":256,"VARIATION":257,"snmp_creation_part_opt":258,"snmp_creation_part":259,"CREATION_REQUIRES":260,"$accept":0,"$end":1},
terminals_: {2:"error",5:"DEFINITIONS",7:"DEFINITION",8:"BEGIN",10:"END",11:"IDENTIFIER_STRING",14:"DOT",15:"EXPLICIT",16:"TAGS",17:"IMPLICIT",21:"EXPORTS",23:"SEMI_COLON",24:"IMPORTS",27:"FROM",29:"COMMA",36:"MACRO",38:"macro_body_element_list",40:"LEFT_PAREN",41:"RIGHT_PAREN",42:"VERTICAL_BAR",43:"INTEGER",44:"REAL",45:"BOOLEAN",46:"NULL",47:"BIT",48:"OCTET",49:"STRING",50:"OBJECT",51:"IDENTIFIER",52:"QUOTED_STRING",76:"BITS",77:"SEQUENCE",78:"LEFT_BRACE",80:"RIGHT_BRACE",81:"OF",82:"SET",84:"CHOICE",85:"ENUMERATED",87:"LESS_THAN",90:"LEFT_BRACKET",91:"NUMBER_STRING",92:"RIGHT_BRACKET",94:"UNIVERSAL",95:"APPLICATION",96:"PRIVATE",97:"ANY",98:"DEFINED",99:"BY",102:"COMPONENTS",103:"OPTIONAL",104:"DEFAULT",109:"MINUS",121:"DOUBLE_DOT",123:"MIN",124:"MAX",125:"SIZE",126:"INCLUDES",127:"WITH",128:"COMPONENT",133:"TRIPLE_DOT",134:"component_list_tail",137:"PRESENT",138:"ABSENT",141:"boolean_value",149:"TRUE",150:"FALSE",151:"PLUS_INFINITY",152:"MINUS_INFINITY",153:"BINARY_STRING",154:"HEXADECIMAL_STRING",171:"MODULE_IDENTITY",172:"OBJECT_IDENTITY",173:"OBJECT_TYPE",174:"NOTIFICATION_TYPE",175:"TRAP_TYPE",176:"TEXTUAL_CONVENTION",177:"OBJECT_GROUP",178:"NOTIFICATION_GROUP",179:"MODULE_COMPLIANCE",180:"AGENT_CAPABILITIES",203:"snmp_product_release_part",205:"LAST_UPDATED",206:"ORGANIZATION",207:"CONTACT_INFO",208:"DESCRIPTION",209:"REVISION",210:"STATUS",211:"REFERENCE",212:"SYNTAX",215:"UNITS",216:"ACCESS",217:"MAX_ACCESS",218:"MIN_ACCESS",221:"INDEX",223:"AUGMENTS",225:"IMPLIED",228:"DEFVAL",229:"OBJECTS",231:"ENTERPRISE",233:"VARIABLES",235:"DISPLAY_HINT",236:"NOTIFICATIONS",238:"MODULE",244:"MANDATORY_GROUPS",248:"GROUP",250:"WRITE_SYTNAX",252:"PRODUCT_RELEASE",254:"SUPPORTS",257:"VARIATION",260:"CREATION_REQUIRES"},
productions_: [0,[3,7],[3,6],[3,5],[3,6],[4,1],[4,2],[13,2],[6,2],[6,2],[9,3],[9,2],[9,2],[18,3],[18,2],[19,3],[25,1],[25,2],[26,3],[22,1],[22,3],[28,1],[28,1],[20,1],[20,2],[31,1],[31,2],[31,1],[31,2],[31,1],[31,2],[32,4],[35,1],[35,1],[37,3],[37,2],[37,2],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[33,3],[53,1],[53,1],[53,1],[55,3],[55,2],[55,2],[55,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[58,1],[59,1],[60,1],[61,1],[61,2],[62,2],[63,2],[63,3],[64,2],[64,3],[65,1],[65,2],[66,4],[66,3],[67,3],[67,4],[68,4],[68,3],[69,4],[69,3],[70,4],[71,2],[72,3],[73,2],[73,3],[88,3],[88,4],[93,1],[93,1],[93,1],[89,1],[89,1],[74,1],[74,4],[79,1],[79,3],[100,3],[100,2],[100,2],[100,1],[100,4],[100,3],[101,1],[101,2],[101,3],[57,1],[57,1],[86,3],[106,1],[106,3],[107,4],[108,2],[108,1],[108,1],[75,3],[111,1],[111,3],[112,1],[112,1],[112,1],[112,1],[112,1],[117,3],[118,1],[118,3],[113,2],[113,1],[120,4],[120,3],[120,3],[120,2],[119,1],[119,1],[122,1],[122,1],[83,2],[114,2],[115,2],[116,3],[116,3],[129,3],[130,2],[130,1],[130,2],[132,2],[132,4],[131,2],[131,1],[131,1],[135,2],[135,1],[135,1],[136,1],[136,1],[136,1],[34,4],[105,1],[105,1],[110,2],[110,1],[139,1],[139,1],[139,1],[139,1],[139,1],[139,1],[139,1],[139,1],[140,1],[148,1],[148,1],[142,1],[142,1],[143,2],[143,1],[144,1],[145,1],[146,1],[147,1],[156,1],[12,1],[155,3],[155,2],[157,1],[157,3],[159,0],[159,1],[158,1],[158,1],[158,1],[160,4],[160,4],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[161,6],[161,5],[185,1],[185,2],[162,4],[162,3],[163,9],[164,5],[165,5],[166,6],[167,5],[168,5],[169,5],[170,6],[170,5],[181,2],[182,2],[183,2],[184,2],[192,0],[192,2],[186,4],[187,2],[188,2],[193,0],[193,2],[189,2],[213,0],[213,2],[214,2],[190,0],[190,2],[191,2],[191,2],[191,2],[219,0],[219,2],[219,2],[219,2],[220,4],[220,4],[194,0],[194,4],[194,4],[222,1],[222,3],[224,1],[224,2],[224,1],[226,1],[226,1],[226,1],[227,4],[195,0],[195,4],[200,4],[196,0],[196,4],[230,1],[230,3],[197,2],[232,4],[198,0],[198,4],[234,2],[199,0],[199,2],[201,4],[202,1],[202,2],[237,4],[237,3],[242,1],[239,0],[239,1],[243,4],[240,0],[240,4],[241,1],[241,2],[245,1],[245,1],[246,3],[247,6],[249,0],[249,2],[251,0],[251,2],[204,1],[204,2],[253,7],[253,6],[255,1],[255,2],[256,8],[259,4],[258,0],[258,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {module_identifier: $$[$0-6], body: $$[$0-1]}; 
break;
case 2:
 return {module_identifier: $$[$0-5], body: {}}; 
break;
case 3:
 return {module_identifier: $$[$0-4], body: {}}; 
break;
case 4:
 return {module_identifier: $$[$0-5], body: $$[$0-1]}; 
break;
case 5: case 173: case 192: case 193: case 194: case 247: case 249: case 251: case 252: case 254: case 255: case 257: case 258: case 260: case 277: case 278: case 279: case 280:
 this.$ = $$[$0]; 
break;
case 6: case 198:
 this.$ = $$[$0-1]; 
break;
case 10:
 this.$ = {exports: $$[$0-2], imports: $$[$0-1], assignments: $$[$0]}; 
break;
case 11:
 this.$ = {exports: $$[$0-1], assignments: $$[$0]}; 
break;
case 12:
 this.$ = {imports: $$[$0-1], assignments: $$[$0]}; 
break;
case 15:
 this.$ = $$[$0-1] 
break;
case 16:

	        symbols_from_module_list = {};
	        symbols_from_module_list[$$[$0].module_identifier] = $$[$0].symbols;
	        this.$ = symbols_from_module_list;
        
break;
case 17:

	        $$[$0-1][$$[$0].module_identifier] = $$[$0].symbols;
	        this.$ = $$[$0-1];
	    
break;
case 18:
 this.$ = { 'module_identifier': $$[$0], 'symbols': $$[$0-2] } 
break;
case 19:
 this.$ = [ $$[$0] ] 
break;
case 20:

	        $$[$0-2].push($$[$0]);
	        this.$ = $$[$0-2];
	    
break;
case 23:

		    var assignment_list = {};
		    assignment_list[$$[$0].assignment.identifier] = { assignment_type: $$[$0].type, assignment_value: $$[$0].assignment };
		    this.$ = assignment_list;
		
break;
case 24:

		    $$[$0-1][$$[$0].assignment.identifier] = { assignment_type: $$[$0].type, assignment_value: $$[$0].assignment };
			this.$ = $$[$0-1];
		
break;
case 25: case 26: case 174:
 this.$ = 'not_implemented' 
break;
case 27:
 this.$ = { type: 'type', assignment: $$[$0] } 
break;
case 28:
 this.$ = { type: 'type', assignment: $$[$0-1] } 
break;
case 29:
 this.$ = { type: 'value', assignment: $$[$0] } 
break;
case 30:
 this.$ = { type: 'value', assignment: $$[$0-1] } 
break;
case 52:
 this.$ = { identifier: $$[$0-2], type: $$[$0] } 
break;
case 53:
 this.$ = { type_class: 'builtin', type_def: $$[$0] }; 
break;
case 54:
 this.$ = { type_class: 'defined', type_def: $$[$0] }; 
break;
case 55:
 this.$ = { type_class: 'defined_macro', type_def: $$[$0] }; 
break;
case 172:
 this.$ = {identifier: $$[$0-3], type: $$[$0-2], value: $$[$0]}; 
break;
case 177:
 this.$ = {type: 'null', value: $$[$0]}; 
break;
case 178:
 this.$ = {type: 'boolean', value: $$[$0]}; 
break;
case 179:
 this.$ = {type: 'special_real', value: $$[$0]}; 
break;
case 180:
 this.$ = {type: 'number', value: $$[$0]}; 
break;
case 181:
 this.$ = {type: 'binary', value: $$[$0]}; 
break;
case 182:
 this.$ = {type: 'hexadecimal', value: $$[$0]}; 
break;
case 183:
 this.$ = {type: 'string', value: $$[$0]}; 
break;
case 184:
 this.$ = {type: $$[$0].type, value: $$[$0].value}; 
break;
case 185:
 this.$ = null; 
break;
case 186:
 this.$ = true; 
break;
case 187: case 248: case 253: case 256: case 259: case 264: case 270: case 282:
 this.$ = false; 
break;
case 188:
 this.$ = 'plus_infinity' 
break;
case 189:
 this.$ = 'minus_infinity' 
break;
case 190:
 this.$ = -1 * parseInt($$[$0]); 
break;
case 191:
 this.$ = parseInt($$[$0]); 
break;
case 195:
 this.$ = {type: 'ambiguous_bit_or_object_identifier', value: $$[$0]}; 
break;
case 196:
 this.$ = {type: 'bit', value: $$[$0]}; 
break;
case 197:
 this.$ = {type: 'object_identifier', value: $$[$0]}; 
break;
case 199:
 this.$ = []; 
break;
case 200: case 273:
 this.$ = [ $$[$0] ]; 
break;
case 201: case 274:

			$$[$0-2].push($$[$0]);
			this.$ = $$[$0-2];
		
break;
case 209:
 this.$ = {macro_type : 'module_identity', value: 'not_implemented'}; 
break;
case 210:
 this.$ = {macro_type : 'object_identity', value: 'not_implemented'}; 
break;
case 211:
 this.$ = {macro_type: 'object_type', value: $$[$0]}; 
break;
case 212:
 this.$ = {macro_type : 'notification_type', value: 'not_implemented'}; 
break;
case 213:
 this.$ = {macro_type : 'trap_type', value: 'not_implemented'}; 
break;
case 214:
 this.$ = {macro_type : 'textual_convention', value: 'not_implemented'}; 
break;
case 215:
 this.$ = {macro_type : 'object_group', value: 'not_implemented'}; 
break;
case 216:
 this.$ = {macro_type : 'notification_group', value: 'not_implemented'}; 
break;
case 217:
 this.$ = {macro_type : 'module_compliance', value: 'not_implemented'}; 
break;
case 218:
 this.$ = {macro_type : 'agent_capabilities', value: 'not_implemented'}; 
break;
case 235:

		object_type = {};
		object_type.syntax = $$[$0-7];
		if($$[$0-7]) { object_type.units = $$[$0-6]; }
		object_type.access = $$[$0-5];
		object_type.status = $$[$0-4];
		if($$[$0-3]) { object_type.descr = $$[$0-3]; }
		if($$[$0-2]) { object_type.refer = $$[$0-2]; }
		if($$[$0-1]) { object_type.index = $$[$0-1]; }
		if($$[$0]) { object_type.defval = $$[$0]; }
		this.$ = object_type;
	
break;
case 261: case 265:
 this.$ = {access_type: 'access', access_level: $$[$0]}; 
break;
case 262: case 266:
 this.$ = {access_type: 'max_access', access_level: $$[$0]}; 
break;
case 263: case 267:
 this.$ = {access_type: 'min_access', access_level: $$[$0]}; 
break;
case 268: case 271:
 this.$ = {part_type: 'index', value: $$[$0-1]}; 
break;
case 269: case 272:
 this.$ = {part_type: 'augments', value: $$[$0-1]}; 
break;
case 275: case 276:
 this.$ = 'not_implemented'; 
break;
case 281: case 283:
 this.$ = $$[$0-3]; 
break;
}
},
table: [{3:1,4:2,11:$V0},{1:[3]},{5:[1,4]},o($V1,[2,5],{12:5,155:6,78:$V2}),{6:8,7:[1,9],15:[1,10],17:[1,11]},o($V1,[2,6]),o($V1,[2,197]),{11:$V3,80:[1,13],91:$V4,157:12,158:14,160:17},{7:[1,18]},{8:[1,19]},{16:[1,20]},{16:[1,21]},o($V5,[2,202],{159:23,29:[1,24],80:[1,22]}),o($V6,[2,199]),o($V7,[2,200]),o($V7,[2,204]),o($V7,[2,205],{40:[1,25]}),o($V7,[2,206]),{8:[1,26]},{9:28,10:[1,27],18:29,19:30,21:$V8,24:$V9},{7:[2,8]},{7:[2,9]},o($V6,[2,198]),{11:$V3,91:$V4,158:33,160:17},o($V5,[2,203]),{11:$Va,13:36,91:[1,34],110:35},{9:38,10:[1,39],18:29,19:30,21:$V8,24:$V9},{1:[2,3]},{10:[1,40]},{11:$Vb,19:41,20:42,24:$V9,30:49,31:43,32:44,33:45,34:46,35:47,171:$Vc,172:$Vd,173:$Ve,174:$Vf,175:$Vg,176:$Vh,177:$Vi,178:$Vj,179:$Vk,180:$Vl},{11:$Vb,20:60,30:49,31:43,32:44,33:45,34:46,35:47,171:$Vc,172:$Vd,173:$Ve,174:$Vf,175:$Vg,176:$Vh,177:$Vi,178:$Vj,179:$Vk,180:$Vl},{11:$Vm,22:61,23:[1,62],28:63,30:65,171:$Vc,172:$Vd,173:$Ve,174:$Vf,175:$Vg,176:$Vh,177:$Vi,178:$Vj,179:$Vk,180:$Vl},{11:$Vm,22:68,25:66,26:67,28:63,30:65,171:$Vc,172:$Vd,173:$Ve,174:$Vf,175:$Vg,176:$Vh,177:$Vi,178:$Vj,179:$Vk,180:$Vl},o($V7,[2,201]),{41:[1,69]},{41:[1,70]},{11:[1,71]},o($Vn,$Vo,{14:$Vp}),{10:[1,73]},{1:[2,2]},{1:[2,4]},{11:$Vb,20:74,30:49,31:43,32:44,33:45,34:46,35:47,171:$Vc,172:$Vd,173:$Ve,174:$Vf,175:$Vg,176:$Vh,177:$Vi,178:$Vj,179:$Vk,180:$Vl},{10:[2,11],11:$Vb,30:49,31:75,32:44,33:45,34:46,35:47,171:$Vc,172:$Vd,173:$Ve,174:$Vf,175:$Vg,176:$Vh,177:$Vi,178:$Vj,179:$Vk,180:$Vl},o($Vq,[2,23]),o($Vq,[2,25],{23:[1,76]}),o($Vq,[2,27],{23:[1,77]}),o($Vq,[2,29],{23:[1,78]}),{36:[1,79]},{7:[1,80],11:$Vr,13:102,36:$Vs,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:81,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},o([10,11,23,36,171,172,173,174,175,176,177,178,179,180],[2,33]),o($VR,[2,219]),o($VR,[2,220]),o($VR,[2,221]),o($VR,[2,222]),o($VR,[2,223]),o($VR,[2,224]),o($VR,[2,225]),o($VR,[2,226]),o($VR,[2,227]),o($VR,[2,228]),{10:[2,12],11:$Vb,30:49,31:75,32:44,33:45,34:46,35:47,171:$Vc,172:$Vd,173:$Ve,174:$Vf,175:$Vg,176:$Vh,177:$Vi,178:$Vj,179:$Vk,180:$Vl},{23:[1,139],29:$VS},o($VT,[2,14]),o($VU,[2,19]),o($VU,[2,21]),o($VU,[2,22]),{11:$Vm,22:68,23:[1,141],26:142,28:63,30:65,171:$Vc,172:$Vd,173:$Ve,174:$Vf,175:$Vg,176:$Vh,177:$Vi,178:$Vj,179:$Vk,180:$Vl},o($VV,[2,16]),{27:[1,143],29:$VS},o($V7,[2,207]),o($V7,[2,208]),o($Vn,[2,175]),o($VW,[2,7]),{1:[2,1]},{10:[2,10],11:$Vb,30:49,31:75,32:44,33:45,34:46,35:47,171:$Vc,172:$Vd,173:$Ve,174:$Vf,175:$Vg,176:$Vh,177:$Vi,178:$Vj,179:$Vk,180:$Vl},o($Vq,[2,24]),o($Vq,[2,26]),o($Vq,[2,28]),o($Vq,[2,30]),{7:[1,144]},{11:$Vr,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:145,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},{7:[1,146]},o($VX,[2,53]),o($VX,[2,54]),o($VX,[2,55]),o($VX,[2,60]),o($VX,[2,61]),o($VX,[2,62]),o($VX,[2,63]),o($VX,[2,64]),o($VX,[2,65]),o($VX,[2,66]),o($VX,[2,67]),o($VX,[2,68]),o($VX,[2,69]),o($VX,[2,70]),o($VX,[2,71]),o($VX,[2,72]),o($VX,[2,73]),o($VX,[2,74]),o($VX,[2,75]),o($VX,[2,76]),{11:[1,147]},o($VX,$VY,{57:148,86:150,75:151,14:$Vp,40:$VZ,78:$V_,87:$V$}),o($VX,[2,209]),o($VX,[2,210]),o($VX,[2,211]),o($VX,[2,212]),o($VX,[2,213]),o($VX,[2,214]),o($VX,[2,215]),o($VX,[2,216]),o($VX,[2,217]),o($VX,[2,218]),o($VX,[2,77]),o($VX,[2,78]),o($VX,[2,79]),o($VX,[2,80],{86:150,75:151,57:154,40:$VZ,78:$V_}),{51:[1,155]},{49:[1,156]},{49:[1,157]},o($VX,[2,87],{86:150,75:151,57:158,40:$VZ,78:$V_}),{40:$VZ,75:161,78:[1,159],81:[1,160]},{78:[1,162],81:[1,164],83:163,125:$V01},{78:[1,166]},{78:$V_,86:167},{11:$Vr,13:102,15:[1,170],17:[1,171],43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:168,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,89:169,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},o($VX,[2,109],{98:[1,172]}),{181:173,205:[1,174]},{187:175,210:$V11},{189:177,212:$V21},{196:179,210:[2,285],229:[1,180]},{197:181,231:[1,182]},{199:183,210:[2,294],235:[1,184]},{200:185,229:[1,186]},{201:187,236:[1,188]},{187:189,210:$V11},{203:[1,190]},{91:[1,191],93:192,94:[1,193],95:[1,194],96:[1,195]},o($VT,[2,13]),{11:$Vm,28:196,30:65,171:$Vc,172:$Vd,173:$Ve,174:$Vf,175:$Vg,176:$Vh,177:$Vi,178:$Vj,179:$Vk,180:$Vl},o($VW,[2,15]),o($VV,[2,17]),{4:197,11:$V0},{8:[1,199],11:[1,201],13:200,37:198},o($V31,[2,52]),{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:202,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},o($VX,[2,57],{86:150,75:151,57:222,40:$VZ,78:$V_}),o($VX,[2,58]),{11:$Vr,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:223,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},o($Vd1,[2,122]),o($Vd1,[2,123]),{11:$Ve1,106:224,107:225},{11:$Va,13:36,27:$Vf1,46:$V41,52:$V51,78:$V2,83:230,91:$V61,105:238,109:$V71,110:204,111:227,112:228,113:229,114:231,115:232,116:233,119:234,123:$Vg1,125:$V01,126:$Vh1,127:$Vi1,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},o($VX,[2,81]),o($VX,[2,82]),o($VX,[2,83],{75:240,40:$VZ}),o($VX,[2,85],{86:150,75:151,57:241,40:$VZ,78:$V_}),o($VX,[2,88]),{11:$Vj1,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:246,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,79:242,80:[1,243],82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,100:244,102:$Vk1,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},{11:$Vr,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:248,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},{81:[1,249]},{11:$Vj1,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:246,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,79:250,80:[1,251],82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,100:244,102:$Vk1,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},{81:[1,252]},{11:$Vr,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:253,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},{40:$Vl1,117:254},{11:$Vj1,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:246,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,79:256,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,100:244,102:$Vk1,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},o($VX,[2,98]),o($VX,[2,100]),{11:$Vr,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:257,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},o($Vm1,[2,107]),o($Vm1,[2,108]),{99:[1,258]},{182:259,206:[1,260]},{52:[1,261]},{184:262,208:$Vn1},{11:[1,264]},o($Vo1,[2,259],{190:265,215:[1,266]}),{11:$Vr,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:267,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},{187:268,210:$V11},{78:[1,269]},o($Vp1,[2,291],{198:270,233:[1,271]}),{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:272,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},{187:273,210:$V11},{52:[1,274]},{187:275,210:$V11},{78:[1,276]},{187:277,210:$V11},{78:[1,278]},{184:279,208:$Vn1},{187:280,210:$V11},{92:[1,281]},{91:[1,282]},{91:[2,104]},{91:[2,105]},{91:[2,106]},o($VU,[2,20]),o($VV,[2,18]),o($V31,[2,31]),{10:[1,284],38:[1,283]},{11:[1,286],30:49,35:285,171:$Vc,172:$Vd,173:$Ve,174:$Vf,175:$Vg,176:$Vh,177:$Vi,178:$Vj,179:$Vk,180:$Vl},{14:$Vp},o($V31,[2,172]),o($Vn,[2,173]),o($Vn,[2,174]),o($Vn,[2,177]),o($Vn,[2,178]),o($Vn,[2,179]),o($Vn,[2,180]),o($Vn,[2,181]),o($Vn,[2,182]),o($Vn,[2,183]),o($Vn,[2,184]),o($Vn,[2,185]),o($Vn,[2,188]),o($Vn,[2,189]),{91:[1,287]},o($Vn,[2,191]),o($Vn,[2,192]),o($Vn,[2,193]),o($Vn,[2,194]),o($Vn,[2,195]),o($VX,[2,56]),o($VX,[2,99]),{29:[1,289],80:[1,288]},o($Vq1,[2,125]),{40:[1,290]},{41:[1,291],42:[1,292]},o($Vr1,[2,132]),o($Vr1,[2,134]),o($Vr1,[2,135]),o($Vr1,[2,136]),o($Vr1,[2,137]),o($Vr1,[2,138]),o($Vr1,[2,143],{120:293,87:[1,294],121:[1,295]}),{40:$Vl1,117:296},{11:$Vr,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:297,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},{102:[1,299],128:[1,298]},o($Vs1,[2,148]),o($Vs1,[2,149]),o($VX,[2,84]),o($VX,[2,86]),{29:$Vt1,80:[1,300]},o($VX,[2,90]),o($Vq1,[2,111]),o([29,80,103,104],$VY,{54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,13:102,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,88:126,57:148,86:150,75:151,53:302,11:$Vr,14:$Vp,40:$VZ,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,76:$VA,77:$VB,78:$V_,82:$VC,84:$VD,85:$VE,87:$V$,90:$VF,97:$VG,102:[1,303],171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ}),o($Vq1,[2,116],{101:304,103:$Vu1,104:$Vv1}),{81:[1,307]},o($VX,[2,91]),{11:$Vr,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:308,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},{29:$Vt1,80:[1,309]},o($VX,[2,94]),{11:$Vr,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:310,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},o($VX,[2,96]),o($Vw1,[2,152]),{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:238,109:$V71,110:204,113:312,118:311,119:234,123:$Vg1,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},{29:$Vt1,80:[1,313]},o($VX,[2,101]),{11:[1,314]},{183:315,207:[1,316]},{52:[1,317]},{206:[2,244]},o($VX,[2,234],{188:318,211:[1,319]}),{52:[1,320]},o($Vx1,[2,251]),{191:321,216:[1,322],217:[1,323],218:[1,324]},{52:[1,325]},o($VX,[2,255]),{184:326,208:$Vn1},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:328,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221,230:327},o([7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,211,215,216,217,218,228,250,260],$Vy1,{192:329,208:$Vz1}),{78:[1,331]},o([7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,211,215,216,217,218,228,233,250,260],[2,289]),{184:332,208:$Vn1},{210:[2,295]},{184:333,208:$Vn1},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:328,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221,230:334},{184:335,208:$Vn1},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:328,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221,230:336},{193:337,211:$VA1,238:$VB1},{184:339,208:$Vn1},o($VC1,[2,102]),{92:[1,340]},{10:[1,341]},o($V31,[2,35]),o($V31,[2,36]),o($V31,$Vs),o($Vn,[2,190]),o($Vd1,[2,124]),{11:$Ve1,107:342},{11:$Va,13:36,91:[1,345],108:343,109:[1,344],110:346},o([7,10,11,23,29,41,42,80,81,103,104,137,138,171,172,173,174,175,176,177,178,179,180,208,215,216,217,218,228,250,260],[2,131]),{11:$Va,13:36,27:$Vf1,46:$V41,52:$V51,78:$V2,83:230,91:$V61,105:238,109:$V71,110:204,112:347,113:229,114:231,115:232,116:233,119:234,123:$Vg1,125:$V01,126:$Vh1,127:$Vi1,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},o($Vr1,[2,142]),{121:[1,348]},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,87:[1,349],91:$V61,105:351,109:$V71,110:204,122:350,124:$VD1,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},o($Vr1,[2,153]),o($Vr1,[2,154]),{40:$VZ,57:353,75:151,78:$V_,86:150},{78:[1,355],129:354},o($VX,[2,89]),{11:$Vj1,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:246,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,100:356,102:$Vk1,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},o($Vq1,[2,114],{101:357,103:$Vu1,104:$Vv1}),{81:[1,358]},o($Vq1,[2,115]),o($Vq1,[2,119]),{11:[1,360],13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:359,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},{11:$Vr,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:361,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},o($VX,[2,92]),o($VX,[2,93]),o($VX,[2,95]),{41:[1,362],42:[1,363]},o($Vr1,[2,140]),o($VX,[2,97]),o($VX,[2,110]),{184:364,208:$Vn1},{52:[1,365]},{207:[2,245]},o($VX,[2,233]),{52:[1,366]},o([7,10,11,23,29,41,42,50,80,103,104,171,172,173,174,175,176,177,178,179,180,208,209,211,212,215,216,217,218,228,238,248,250,254,257,260],[2,247]),{187:367,210:$V11},{11:[1,368]},{11:[1,369]},{11:[1,370]},o($Vo1,[2,260]),o($VX,$VB1,{193:371,211:$VA1}),{29:$VE1,80:[1,372]},o($Vq1,[2,287]),o($VX,$VB1,{193:374,211:$VA1}),{52:[1,375]},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:328,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221,230:376},{193:377,211:$VA1,212:$VB1},o($VX,$VB1,{193:378,211:$VA1}),{29:$VE1,80:[1,379]},o($VX,$VB1,{193:380,211:$VA1}),{29:$VE1,80:[1,381]},{202:382,237:383,238:$VF1},{52:[1,385]},o($VG1,$VB1,{193:386,211:$VA1}),o($VC1,[2,103]),o($V31,[2,34]),o($Vq1,[2,126]),{41:[1,387]},{91:[1,388]},{41:[2,129]},{41:[2,130]},o($Vr1,[2,133]),{11:$Va,13:36,46:$V41,52:$V51,78:$V2,87:[1,389],91:$V61,105:351,109:$V71,110:204,122:390,124:$VD1,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:351,109:$V71,110:204,122:391,124:$VD1,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},o($Vr1,[2,147]),o($Vr1,[2,150]),o($Vr1,[2,151]),o($Vr1,[2,155]),o($Vr1,[2,156]),{11:$VH1,40:$VZ,57:397,75:151,78:$V_,86:150,103:$VI1,130:392,131:393,133:[1,394],135:396,136:398,137:$VJ1,138:$VK1},o($Vq1,[2,112]),o($Vq1,[2,113]),{11:$Vr,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:402,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},o($Vq1,[2,120]),o($Vq1,$Vo,{13:36,139:203,110:204,140:205,142:207,143:208,144:209,145:210,146:211,147:212,155:221,105:403,11:$Va,14:$Vp,46:$V41,52:$V51,78:$V2,91:$V61,109:$V71,141:$V81,151:$V91,152:$Va1,153:$Vb1,154:$Vc1}),o($Vq1,[2,118]),o($Vw1,[2,139]),{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:238,109:$V71,110:204,113:404,119:234,123:$Vg1,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},o($VX,[2,230],{185:405,186:406,209:$VL1}),{208:[2,246]},o($VX,[2,252]),o([7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,211,215,216,217,218,221,223,228,250,260],$Vy1,{192:408,208:$Vz1}),{210:[2,261]},{210:[2,262]},{210:[2,263]},o($VX,[2,236]),{210:[2,286]},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:409,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},o($VX,[2,237]),o($Vx1,[2,249]),{29:$VE1,80:[1,410]},{189:411,212:$V21},o($VX,[2,239]),{210:[2,284]},o($VX,[2,240]),{210:[2,296]},o($VX,[2,241],{237:412,238:$VF1}),o($VM1,[2,297]),o([7,10,23,29,41,42,50,80,103,104,171,172,173,174,175,176,177,178,179,180,208,215,216,217,218,228,238,244,248,250,260],[2,302],{239:413,4:414,11:$V0}),o([7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,212,215,216,217,218,221,223,228,238,250,254,260],[2,254]),o($VX,[2,243],{204:415,253:416,254:$VN1}),o($Vq1,[2,127]),{41:[2,128]},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:351,109:$V71,110:204,122:418,124:$VD1,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},o($Vr1,[2,145]),o($Vr1,[2,146]),{80:[1,419]},{29:$VO1,80:[2,159],132:420},{29:$VO1,132:422},o($Vq1,[2,164],{86:150,75:151,57:397,136:398,135:423,40:$VZ,78:$V_,103:$VI1,137:$VJ1,138:$VK1}),o($Vq1,[2,165]),o($Vq1,[2,167],{136:424,103:$VI1,137:$VJ1,138:$VK1}),o($Vq1,[2,168]),o($Vq1,[2,169]),o($Vq1,[2,170]),o($Vq1,[2,171]),o($Vq1,[2,117]),o($Vq1,[2,121]),o($Vr1,[2,141]),o($VX,[2,229],{186:425,209:$VL1}),o($VP1,[2,231]),{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:426,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},o([7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,215,216,217,218,221,223,228,250,260],$VB1,{193:427,211:$VA1}),o($Vq1,[2,288]),o($Vp1,[2,292]),o($VX,[2,238]),o($VM1,[2,298]),o($VQ1,[2,305],{240:428,244:[1,429]}),o([7,10,11,23,29,41,42,50,80,103,104,171,172,173,174,175,176,177,178,179,180,208,215,216,217,218,228,238,244,248,250,260],[2,303]),o($VX,[2,242],{253:430,254:$VN1}),o($VG1,[2,317]),{4:432,11:$V0,242:431},o($Vr1,[2,144]),o($Vr1,[2,157]),{80:[2,158]},{11:$VH1,40:$VZ,57:397,75:151,78:$V_,86:150,103:$VI1,131:433,134:[1,434],135:396,136:398,137:$VJ1,138:$VK1},{80:[2,160]},o($Vq1,[2,163]),o($Vq1,[2,166]),o($VP1,[2,232]),{208:[1,435]},o($VX,[2,270],{194:436,221:[1,437],223:[1,438]}),o($VM1,[2,300],{241:439,245:440,246:441,247:442,50:$VR1,248:$VS1}),{78:[1,445]},o($VG1,[2,318]),{126:[1,446]},{126:[2,301]},{80:[2,161]},{29:[1,447]},{52:[1,448]},o([7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,215,216,217,218,250,260],$VT1,{195:449,228:$VU1}),{78:[1,451]},{78:[1,452]},o($VM1,[2,299],{246:441,247:442,245:453,50:$VR1,248:$VS1}),o($VQ1,[2,307]),o($VQ1,[2,309]),o($VQ1,[2,310]),{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:454,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:455,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:328,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221,230:456},{78:[1,457]},{11:$VH1,40:$VZ,57:397,75:151,78:$V_,86:150,103:$VI1,131:458,135:396,136:398,137:$VJ1,138:$VK1},o($VP1,[2,250]),o($VX,[2,235]),{78:[1,459]},{11:$Va,13:36,43:$Vt,46:$V41,48:$Vy,50:$Vz,52:$V51,61:465,62:467,63:466,78:$V2,91:$V61,105:462,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221,222:460,224:461,225:$VV1,226:464},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:468,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},o($VQ1,[2,308]),{184:469,208:$Vn1},o([208,216,217,218,250],$VW1,{213:470,212:$VX1}),{29:$VE1,80:[1,472]},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:328,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221,230:473},{80:[2,162]},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:474,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},{29:[1,476],80:[1,475]},o($Vq1,[2,273]),o($Vq1,[2,275]),{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:477,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},o($Vq1,[2,277]),o($Vq1,[2,278]),o($Vq1,[2,279]),o($Vq1,[2,280]),{80:[1,478]},o($VQ1,[2,311]),o([208,216,217,218],$VY1,{249:479,250:$VZ1}),{11:$Vr,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:481,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},o($VQ1,[2,306]),{29:$VE1,80:[1,482]},{80:[1,483]},o($VX,[2,271]),{11:$Va,13:36,43:$Vt,46:$V41,48:$Vy,50:$Vz,52:$V51,61:465,62:467,63:466,78:$V2,91:$V61,105:462,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221,224:484,225:$VV1,226:464},o($Vq1,[2,276]),o($VX,[2,272]),{208:$V_1,216:$V$1,217:$V02,218:$V12,219:485},{11:$Vr,13:102,43:$Vt,44:$Vu,45:$Vv,46:$Vw,47:$Vx,48:$Vy,50:$Vz,53:489,54:82,55:83,56:84,58:85,59:86,60:87,61:88,62:89,63:90,64:91,65:92,66:93,67:94,68:95,69:96,70:97,71:98,72:99,73:100,74:101,76:$VA,77:$VB,82:$VC,84:$VD,85:$VE,88:126,90:$VF,97:$VG,161:104,162:105,163:106,164:107,165:108,166:109,167:110,168:111,169:112,170:113,171:$VH,172:$VI,173:$VJ,174:$VK,175:$VL,176:$VM,177:$VN,178:$VO,179:$VP,180:$VQ},o($V22,[2,257]),o($VG1,[2,320],{255:490,256:491,257:$V32}),o($VX,[2,283]),o($Vq1,[2,274]),{184:493,208:$Vn1},{11:[1,494]},{11:[1,495]},{11:[1,496]},o($V42,[2,314]),o($VG1,[2,319],{256:497,257:$V32}),o($V52,[2,321]),{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:498,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221},o($VQ1,[2,312]),o($V62,[2,265]),o($V62,[2,266]),o($V62,[2,267]),o($V52,[2,322]),o($V22,$VW1,{213:499,212:$VX1}),o($V42,$VY1,{249:500,250:$VZ1}),o($V62,$V_1,{219:501,216:$V$1,217:$V02,218:$V12}),o($V72,[2,325],{258:502,260:[1,503]}),{195:504,208:$VT1,228:$VU1},{78:[1,505]},{184:506,208:$Vn1},{11:$Va,13:36,46:$V41,52:$V51,78:$V2,91:$V61,105:328,109:$V71,110:204,139:203,140:205,141:$V81,142:207,143:208,144:209,145:210,146:211,147:212,151:$V91,152:$Va1,153:$Vb1,154:$Vc1,155:221,230:507},o($V52,[2,323]),{29:$VE1,80:[1,508]},o($V72,[2,326])],
defaultActions: {20:[2,8],21:[2,9],27:[2,3],39:[2,2],40:[2,4],73:[2,1],193:[2,104],194:[2,105],195:[2,106],261:[2,244],274:[2,295],317:[2,245],345:[2,129],346:[2,130],365:[2,246],368:[2,261],369:[2,262],370:[2,263],372:[2,286],379:[2,284],381:[2,296],388:[2,128],420:[2,158],422:[2,160],432:[2,301],433:[2,161],458:[2,162]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:return 133;
break;
case 3:return 121;
break;
case 4:return 14;
break;
case 5:return 29;
break;
case 6:return 23;
break;
case 7:return 40;
break;
case 8:return 41;
break;
case 9:return 78;
break;
case 10:return 80;
break;
case 11:return 90;
break;
case 12:return 92;
break;
case 13:return 109;
break;
case 14:return 87;
break;
case 15:return 42;
break;
case 16:return 7;
break;
case 17:return 5;
break;
case 18:return 15;
break;
case 19:return 17;
break;
case 20:return 16;
break;
case 21:return 8;
break;
case 22:return 10;
break;
case 23:return 21;
break;
case 24:return 24;
break;
case 25:return 27;
break;
case 26:return 'MACRO  ';
break;
case 27:return 43;
break;
case 28:return 44;
break;
case 29:return 45;
break;
case 30:return 46;
break;
case 31:return 47;
break;
case 32:return 48;
break;
case 33:return 49;
break;
case 34:return 85;
break;
case 35:return 77;
break;
case 36:return 82;
break;
case 37:return 81;
break;
case 38:return 84;
break;
case 39:return 94;
break;
case 40:return 95;
break;
case 41:return 96;
break;
case 42:return 97;
break;
case 43:return 98;
break;
case 44:return 99;
break;
case 45:return 229;
break;
case 46:return 177;
break;
case 47:return 172;
break;
case 48:return 173;
break;
case 49:return 50;
break;
case 50:return 51;
break;
case 51:return 126;
break;
case 52:return 218;
break;
case 53:return 123;
break;
case 54:return 217;
break;
case 55:return 124;
break;
case 56:return 125;
break;
case 57:return 127;
break;
case 58:return 102;
break;
case 59:return 128;
break;
case 60:return 137;
break;
case 61:return 138;
break;
case 62:return 103;
break;
case 63:return 104;
break;
case 64:return 149;
break;
case 65:return 150;
break;
case 66:return 151;
break;
case 67:return 152;
break;
case 68:return 171;
break;
case 69:return 174;
break;
case 70:return 175;
break;
case 71:return 176;
break;
case 72:return 178;
break;
case 73:return 179;
break;
case 74:return 180;
break;
case 75:return 205;
break;
case 76:return 206;
break;
case 77:return 207;
break;
case 78:return 208;
break;
case 79:return 209;
break;
case 80:return 210;
break;
case 81:return 211;
break;
case 82:return 212;
break;
case 83:return 76;
break;
case 84:return 215;
break;
case 85:return 216;
break;
case 86:return 221;
break;
case 87:return 223;
break;
case 88:return 225;
break;
case 89:return 228;
break;
case 90:return 231;
break;
case 91:return 233;
break;
case 92:return 235;
break;
case 93:return 236;
break;
case 94:return 238;
break;
case 95:return 244;
break;
case 96:return 248;
break;
case 97:return 'WRITE_SYNTAX';
break;
case 98:return 252;
break;
case 99:return 254;
break;
case 100:return 257;
break;
case 101:return 260;
break;
case 102:return 153;
break;
case 103:return 154;
break;
case 104:return 52;
break;
case 105:return 11;
break;
case 106:return 91;
break;
}
},
rules: [/^(?:[ \t\n\r]+)/,/^(?:--[^\n\r]*)/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:-)/,/^(?:<)/,/^(?:\|)/,/^(?:::=)/,/^(?:DEFINITIONS\b)/,/^(?:EXPLICIT\b)/,/^(?:IMPLICIT\b)/,/^(?:TAGS\b)/,/^(?:BEGIN\b)/,/^(?:END\b)/,/^(?:EXPORTS\b)/,/^(?:IMPORTS\b)/,/^(?:FROM\b)/,/^(?:MACRO\b)/,/^(?:INTEGER\b)/,/^(?:REAL\b)/,/^(?:BOOLEAN\b)/,/^(?:NULL\b)/,/^(?:BIT\b)/,/^(?:OCTET\b)/,/^(?:STRING\b)/,/^(?:ENUMERATED\b)/,/^(?:SEQUENCE\b)/,/^(?:SET\b)/,/^(?:OF\b)/,/^(?:CHOICE\b)/,/^(?:UNIVERSAL\b)/,/^(?:APPLICATION\b)/,/^(?:PRIVATE\b)/,/^(?:ANY\b)/,/^(?:DEFINED\b)/,/^(?:BY\b)/,/^(?:OBJECTS\b)/,/^(?:OBJECT-GROUP\b)/,/^(?:OBJECT-IDENTITY\b)/,/^(?:OBJECT-TYPE\b)/,/^(?:OBJECT\b)/,/^(?:IDENTIFIER\b)/,/^(?:INCLUDES\b)/,/^(?:MIN-ACCESS\b)/,/^(?:MIN\b)/,/^(?:MAX-ACCESS\b)/,/^(?:MAX\b)/,/^(?:SIZE\b)/,/^(?:WITH\b)/,/^(?:COMPONENTS\b)/,/^(?:COMPONENT\b)/,/^(?:PRESENT\b)/,/^(?:ABSENT\b)/,/^(?:OPTIONAL\b)/,/^(?:DEFAULT\b)/,/^(?:TRUE\b)/,/^(?:FALSE\b)/,/^(?:PLUS-INFINITY\b)/,/^(?:MINUS-INFINITY\b)/,/^(?:MODULE-IDENTITY\b)/,/^(?:NOTIFICATION-TYPE\b)/,/^(?:TRAP-TYPE\b)/,/^(?:TEXTUAL-CONVENTION\b)/,/^(?:NOTIFICATION-GROUP\b)/,/^(?:MODULE-COMPLIANCE\b)/,/^(?:AGENT-CAPABILITIES\b)/,/^(?:LAST-UPDATED\b)/,/^(?:ORGANIZATION\b)/,/^(?:CONTACT-INFO\b)/,/^(?:DESCRIPTION\b)/,/^(?:REVISION\b)/,/^(?:STATUS\b)/,/^(?:REFERENCE\b)/,/^(?:SYNTAX\b)/,/^(?:BITS\b)/,/^(?:UNITS\b)/,/^(?:ACCESS\b)/,/^(?:INDEX\b)/,/^(?:AUGMENTS\b)/,/^(?:IMPLIED\b)/,/^(?:DEFVAL\b)/,/^(?:ENTERPRISE\b)/,/^(?:VARIABLES\b)/,/^(?:DISPLAY-HINT\b)/,/^(?:NOTIFICATIONS\b)/,/^(?:MODULE\b)/,/^(?:MANDATORY-GROUPS\b)/,/^(?:GROUP\b)/,/^(?:WRITE-SYNTAX\b)/,/^(?:PRODUCT-RELEASE\b)/,/^(?:SUPPORTS\b)/,/^(?:VARIATION\b)/,/^(?:CREATION-REQUIRES\b)/,/^(?:\[0-1\]\*(B|b))/,/^(?:\[0-9A-Fa-f\]\*(H|h))/,/^(?:"[^"]*")/,/^(?:[a-zA-Z][a-zA-Z0-9-_]*)/,/^(?:[0-9]+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}