/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[5,7,11,23,50,126,171,172,173,174,175,176,177,178,179,180,240,245,250],$V2=[1,7],$V3=[1,16],$V4=[1,15],$V5=[11,91],$V6=[5,7,10,11,23,29,41,42,50,80,87,103,104,121,126,171,172,173,174,175,176,177,178,179,180,208,212,213,216,217,218,219,229,235,240,245,250,252,263],$V7=[11,29,80,91],$V8=[1,37],$V9=[1,31],$Va=[1,39],$Vb=[1,40],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[1,44],$Vg=[1,45],$Vh=[1,46],$Vi=[1,47],$Vj=[1,48],$Vk=[1,53],$Vl=[1,63],$Vm=[10,11,171,172,173,174,175,176,177,178,179,180],$Vn=[1,102],$Vo=[2,31],$Vp=[1,116],$Vq=[1,115],$Vr=[1,114],$Vs=[1,113],$Vt=[1,118],$Vu=[1,117],$Vv=[1,76],$Vw=[1,119],$Vx=[1,120],$Vy=[1,121],$Vz=[1,122],$VA=[1,123],$VB=[1,128],$VC=[1,125],$VD=[1,126],$VE=[1,127],$VF=[10,11,23,27,29,36,171,172,173,174,175,176,177,178,179,180],$VG=[7,10,11,23,29,41,42,80,87,103,104,121,171,172,173,174,175,176,177,178,179,180,208,212,216,217,218,219,229,235,252,263],$VH=[2,177],$VI=[1,132],$VJ=[11,23,171,172,173,174,175,176,177,178,179,180],$VK=[27,29],$VL=[7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,216,217,218,219,229,252,263],$VM=[2,58],$VN=[1,151],$VO=[1,150],$VP=[1,147],$VQ=[1,155],$VR=[1,157],$VS=[1,176],$VT=[11,171,172,173,174,175,176,177,178,179,180],$VU=[10,11,23,171,172,173,174,175,176,177,178,179,180],$VV=[1,210],$VW=[1,219],$VX=[1,216],$VY=[1,215],$VZ=[1,211],$V_=[1,212],$V$=[1,213],$V01=[1,214],$V11=[1,217],$V21=[1,218],$V31=[7,10,11,23,29,41,42,80,103,104,137,138,171,172,173,174,175,176,177,178,179,180,208,216,217,218,219,229,252,263],$V41=[1,227],$V51=[1,236],$V61=[1,240],$V71=[1,237],$V81=[1,238],$V91=[1,245],$Va1=[217,218,219],$Vb1=[1,263],$Vc1=[1,265],$Vd1=[1,273],$Ve1=[11,43,44,45,46,47,48,50,76,77,82,84,85,90,97,175,176],$Vf1=[7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,212,216,217,218,219,229,252,263],$Vg1=[7,10,11,23,29,41,42,80,87,103,104,121,171,172,173,174,175,176,177,178,179,180,208,212,213,216,217,218,219,229,235,252,263],$Vh1=[29,80],$Vi1=[41,42],$Vj1=[41,42,87,121],$Vk1=[2,253],$Vl1=[1,305],$Vm1=[1,315],$Vn1=[1,324],$Vo1=[1,328],$Vp1=[1,329],$Vq1=[41,42,81],$Vr1=[2,248],$Vs1=[1,339],$Vt1=[11,15,17,43,44,45,46,47,48,50,76,77,82,84,85,90,97,175,176],$Vu1=[1,354],$Vv1=[1,367],$Vw1=[29,80,208,213,217,218,219,252],$Vx1=[1,374],$Vy1=[7,257],$Vz1=[1,396],$VA1=[1,402],$VB1=[1,400],$VC1=[1,401],$VD1=[1,406],$VE1=[7,240],$VF1=[7,50,240,245,250],$VG1=[1,415],$VH1=[1,424],$VI1=[7,209],$VJ1=[7,50,240,250],$VK1=[7,229],$VL1=[1,448],$VM1=[1,447],$VN1=[2,282],$VO1=[1,454],$VP1=[1,467],$VQ1=[2,256],$VR1=[1,475],$VS1=[2,315],$VT1=[1,484],$VU1=[2,264],$VV1=[1,490],$VW1=[1,491],$VX1=[1,492],$VY1=[208,217,218,219,229,252,263],$VZ1=[1,497],$V_1=[208,217,218,219,229,263],$V$1=[208,229,263],$V02=[208,229];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"module_definition":3,"module_identifier":4,"DEFINITIONS":5,"tag_default":6,"DEFINITION":7,"BEGIN":8,"module_body":9,"END":10,"IDENTIFIER_STRING":11,"object_identifier_value":12,"module_reference":13,"DOT":14,"EXPLICIT":15,"TAGS":16,"IMPLICIT":17,"import_list":18,"assignment_list":19,"export_list":20,"EXPORTS":21,"symbol_list":22,"SEMI_COLON":23,"IMPORTS":24,"symbols_from_module_list":25,"symbols_from_module":26,"FROM":27,"symbol":28,"COMMA":29,"defined_macro_name":30,"assignment":31,"macro_definition":32,"type_assignment":33,"value_assignment":34,"macro_reference":35,"MACRO":36,"macro_body":37,"macro_body_element_list":38,"macro_body_element":39,"LEFT_PAREN":40,"RIGHT_PAREN":41,"VERTICAL_BAR":42,"INTEGER":43,"REAL":44,"BOOLEAN":45,"NULL":46,"BIT":47,"OCTET":48,"STRING":49,"OBJECT":50,"IDENTIFIER":51,"QUOTED_STRING":52,"type":53,"builtin_type":54,"defined_type":55,"defined_macro_type":56,"value_or_constraint_list":57,"null_type":58,"boolean_type":59,"real_type":60,"integer_type":61,"object_identifier_type":62,"string_type":63,"bit_string_type":64,"bits_type":65,"sequence_type":66,"sequence_of_type":67,"set_type":68,"set_of_type":69,"choice_type":70,"enumerated_type":71,"selection_type":72,"tagged_type":73,"any_type":74,"constraint_list_container":75,"BITS":76,"SEQUENCE":77,"LEFT_BRACE":78,"element_type_list":79,"RIGHT_BRACE":80,"OF":81,"SET":82,"size_constraint":83,"CHOICE":84,"ENUMERATED":85,"named_number_list_container":86,"LESS_THAN":87,"tag":88,"explicit_or_implicit_tag":89,"LEFT_BRACKET":90,"NUMBER_STRING":91,"RIGHT_BRACKET":92,"class":93,"UNIVERSAL":94,"APPLICATION":95,"PRIVATE":96,"ANY":97,"DEFINED":98,"BY":99,"element_type":100,"optional_or_default_element":101,"COMPONENTS":102,"OPTIONAL":103,"DEFAULT":104,"value":105,"named_number_list":106,"named_number":107,"number":108,"MINUS":109,"defined_value":110,"constraint_list":111,"constraint":112,"value_constraint":113,"alphabet_constraint":114,"contained_type_constraint":115,"inner_type_constraint":116,"value_constraint_list_container":117,"value_constraint_list":118,"lower_end_point":119,"value_range":120,"DOUBLE_DOT":121,"upper_end_point":122,"MIN":123,"MAX":124,"SIZE":125,"INCLUDES":126,"WITH":127,"COMPONENT":128,"components_list_container":129,"component_constraint_list":130,"component_constraint":131,"components_list_tail":132,"TRIPLE_DOT":133,"component_list_tail":134,"component_value_presence":135,"component_presence":136,"PRESENT":137,"ABSENT":138,"object_identifier_macro_type":139,"builtin_value":140,"null_value":141,"boolean_value":142,"special_real_value":143,"number_value":144,"binary_value":145,"hexadecimal_value":146,"string_value":147,"bit_or_object_identifier_value":148,"TRUE":149,"FALSE":150,"PLUS_INFINITY":151,"MINUS_INFINITY":152,"BINARY_STRING":153,"HEXADECIMAL_STRING":154,"name_value_list_container":155,"bit_value":156,"name_value_list":157,"name_or_number":158,"comma_opt":159,"name_and_number":160,"snmp_trap_type_macro_type":161,"snmp_textual_convention_macro_type":162,"snmp_module_identity_macro_type":163,"snmp_object_identity_macro_type":164,"snmp_object_type_macro_type":165,"snmp_notification_type_macro_type":166,"snmp_object_group_macro_type":167,"snmp_notification_group_macro_type":168,"snmp_module_compliance_macro_type":169,"snmp_agent_capabilities_macro_type":170,"MODULE_IDENTITY":171,"OBJECT_IDENTITY":172,"OBJECT_TYPE":173,"NOTIFICATION_TYPE":174,"TRAP_TYPE":175,"TEXTUAL_CONVENTION":176,"OBJECT_GROUP":177,"NOTIFICATION_GROUP":178,"MODULE_COMPLIANCE":179,"AGENT_CAPABILITIES":180,"snmp_update_part":181,"snmp_organization_part":182,"snmp_contact_part":183,"snmp_descr_part":184,"snmp_revision_part_list_opt":185,"snmp_revision_part_list":186,"snmp_revision_part":187,"snmp_status_part":188,"snmp_refer_part_opt":189,"snmp_syntax_part":190,"snmp_units_part_opt":191,"snmp_access_part":192,"snmp_descr_part_opt":193,"snmp_index_part_opt":194,"snmp_def_val_part_opt":195,"snmp_objects_part_opt":196,"snmp_enterprise_part":197,"snmp_var_part_opt":198,"snmp_display_part_opt":199,"snmp_objects_part":200,"snmp_notifications_part":201,"snmp_module_part_list":202,"snmp_product_release_part":203,"snmp_module_support_part_list_opt":204,"LAST_UPDATED":205,"ORGANIZATION":206,"CONTACT_INFO":207,"DESCRIPTION":208,"REVISION":209,"STATUS":210,"snmp_refer_part":211,"REFERENCE":212,"SYNTAX":213,"snmp_syntax_part_opt":214,"snmp_units_part":215,"UNITS":216,"ACCESS":217,"MAX_ACCESS":218,"MIN_ACCESS":219,"snmp_access_part_opt":220,"snmp_index_part":221,"INDEX":222,"index_value_list":223,"AUGMENTS":224,"index_value":225,"IMPLIED":226,"index_type":227,"snmp_def_val_part":228,"DEFVAL":229,"OBJECTS":230,"identifier_or_value_list":231,"identifier_or_value":232,"ENTERPRISE":233,"snmp_var_part":234,"VARIABLES":235,"snmp_display_part":236,"DISPLAY_HINT":237,"NOTIFICATIONS":238,"snmp_module_part":239,"MODULE":240,"snmp_module_import_opt":241,"snmp_mandatory_part_opt":242,"snmp_compliance_part_list_opt":243,"snmp_module_import":244,"MANDATORY_GROUPS":245,"snmp_compliance_part_list":246,"snmp_compliance_part":247,"compliance_group":248,"compliance_object":249,"GROUP":250,"snmp_write_syntax_part_opt":251,"WRITE_SYNTAX":252,"snmp_product_release_part_opt":253,"PRODUCT_RELEASE":254,"snmp_module_support_part_list":255,"snmp_module_support_part":256,"SUPPORTS":257,"snmp_variation_part_list_opt":258,"snmp_variation_part":259,"snmp_variation_part_list":260,"VARIATION":261,"snmp_creation_part_opt":262,"CREATION_REQUIRES":263,"$accept":0,"$end":1},
terminals_: {2:"error",5:"DEFINITIONS",7:"DEFINITION",8:"BEGIN",10:"END",11:"IDENTIFIER_STRING",14:"DOT",15:"EXPLICIT",16:"TAGS",17:"IMPLICIT",21:"EXPORTS",23:"SEMI_COLON",24:"IMPORTS",27:"FROM",29:"COMMA",36:"MACRO",38:"macro_body_element_list",40:"LEFT_PAREN",41:"RIGHT_PAREN",42:"VERTICAL_BAR",43:"INTEGER",44:"REAL",45:"BOOLEAN",46:"NULL",47:"BIT",48:"OCTET",49:"STRING",50:"OBJECT",51:"IDENTIFIER",52:"QUOTED_STRING",76:"BITS",77:"SEQUENCE",78:"LEFT_BRACE",80:"RIGHT_BRACE",81:"OF",82:"SET",84:"CHOICE",85:"ENUMERATED",87:"LESS_THAN",90:"LEFT_BRACKET",91:"NUMBER_STRING",92:"RIGHT_BRACKET",94:"UNIVERSAL",95:"APPLICATION",96:"PRIVATE",97:"ANY",98:"DEFINED",99:"BY",102:"COMPONENTS",103:"OPTIONAL",104:"DEFAULT",109:"MINUS",121:"DOUBLE_DOT",123:"MIN",124:"MAX",125:"SIZE",126:"INCLUDES",127:"WITH",128:"COMPONENT",133:"TRIPLE_DOT",134:"component_list_tail",137:"PRESENT",138:"ABSENT",149:"TRUE",150:"FALSE",151:"PLUS_INFINITY",152:"MINUS_INFINITY",153:"BINARY_STRING",154:"HEXADECIMAL_STRING",171:"MODULE_IDENTITY",172:"OBJECT_IDENTITY",173:"OBJECT_TYPE",174:"NOTIFICATION_TYPE",175:"TRAP_TYPE",176:"TEXTUAL_CONVENTION",177:"OBJECT_GROUP",178:"NOTIFICATION_GROUP",179:"MODULE_COMPLIANCE",180:"AGENT_CAPABILITIES",203:"snmp_product_release_part",205:"LAST_UPDATED",206:"ORGANIZATION",207:"CONTACT_INFO",208:"DESCRIPTION",209:"REVISION",210:"STATUS",212:"REFERENCE",213:"SYNTAX",216:"UNITS",217:"ACCESS",218:"MAX_ACCESS",219:"MIN_ACCESS",222:"INDEX",224:"AUGMENTS",226:"IMPLIED",229:"DEFVAL",230:"OBJECTS",233:"ENTERPRISE",235:"VARIABLES",237:"DISPLAY_HINT",238:"NOTIFICATIONS",240:"MODULE",245:"MANDATORY_GROUPS",250:"GROUP",252:"WRITE_SYNTAX",254:"PRODUCT_RELEASE",257:"SUPPORTS",260:"snmp_variation_part_list",261:"VARIATION",263:"CREATION_REQUIRES"},
productions_: [0,[3,7],[3,6],[3,5],[3,6],[4,1],[4,2],[13,2],[6,2],[6,2],[9,2],[9,1],[20,3],[20,2],[18,3],[25,1],[25,2],[26,3],[22,1],[22,3],[28,1],[28,1],[19,1],[19,2],[31,1],[31,2],[31,1],[31,2],[31,1],[31,2],[32,4],[35,1],[35,1],[37,3],[37,2],[37,2],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[33,3],[53,1],[53,1],[53,1],[55,3],[55,2],[55,2],[55,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[58,1],[59,1],[60,1],[61,1],[61,2],[62,2],[63,2],[63,3],[64,2],[64,3],[65,1],[65,2],[66,4],[66,3],[67,3],[67,4],[68,4],[68,3],[69,4],[69,3],[70,4],[71,2],[72,3],[73,2],[73,3],[88,3],[88,4],[93,1],[93,1],[93,1],[89,1],[89,1],[74,1],[74,4],[79,1],[79,3],[100,3],[100,2],[100,2],[100,1],[100,4],[100,3],[101,1],[101,2],[101,3],[57,1],[57,1],[86,3],[106,1],[106,3],[107,4],[108,2],[108,1],[108,1],[75,3],[111,1],[111,3],[112,1],[112,1],[112,1],[112,1],[112,1],[117,3],[118,1],[118,3],[113,2],[113,1],[120,4],[120,3],[120,3],[120,2],[119,1],[119,1],[122,1],[122,1],[83,2],[114,2],[115,2],[116,3],[116,3],[129,3],[130,2],[130,1],[130,2],[132,2],[132,4],[131,2],[131,1],[131,1],[135,2],[135,1],[135,1],[136,1],[136,1],[136,1],[34,4],[34,4],[34,4],[105,1],[105,1],[110,2],[110,1],[140,1],[140,1],[140,1],[140,1],[140,1],[140,1],[140,1],[140,1],[141,1],[142,1],[142,1],[143,1],[143,1],[144,2],[144,1],[145,1],[146,1],[147,1],[148,1],[156,1],[12,1],[155,3],[155,2],[157,1],[157,3],[159,0],[159,1],[158,1],[158,1],[158,1],[160,4],[160,4],[56,1],[56,1],[139,1],[139,1],[139,1],[139,1],[139,1],[139,1],[139,1],[139,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[163,6],[185,1],[185,0],[186,1],[186,2],[164,4],[165,9],[166,5],[161,5],[162,6],[167,5],[168,5],[169,5],[170,6],[181,2],[182,2],[183,2],[184,2],[193,0],[193,2],[187,4],[188,2],[211,2],[189,0],[189,2],[190,2],[214,0],[214,2],[215,2],[191,0],[191,2],[192,2],[192,2],[192,2],[220,0],[220,2],[220,2],[220,2],[221,4],[221,4],[194,0],[194,4],[194,4],[223,1],[223,3],[225,1],[225,2],[225,1],[227,1],[227,1],[227,1],[228,4],[195,0],[195,4],[200,4],[196,0],[196,4],[231,1],[231,3],[232,1],[232,1],[197,2],[234,4],[198,0],[198,4],[236,2],[199,0],[199,2],[201,4],[202,1],[202,2],[239,4],[244,1],[241,0],[241,1],[242,0],[242,4],[243,0],[243,1],[246,1],[246,2],[247,1],[247,1],[248,3],[249,6],[251,0],[251,2],[253,0],[253,2],[204,0],[204,1],[255,1],[255,2],[256,7],[258,0],[258,1],[258,2],[259,8],[262,0],[262,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		    return {
                module_name: $$[$0-6] || '',
                imports: $$[$0-1].imports || [],
                definitions: $$[$0-1].definitions || []
            };
        
break;
case 2:

		    return {
		        module_identifier: $$[$0-5],
		        imports: [],
		        definitions: []
            };
        
break;
case 3:

            return {
                module_identifier: $$[$0-4] || '',
                imports: [],
                definitions: []
            };
        
break;
case 4:

            return {
                module_identifier: $$[$0-5] || '',
                imports: $$[$0-1].imports || [],
                definitions: $$[$0-1].definitions || []
            };
        
break;
case 5: case 174: case 193: case 194: case 195: case 207: case 231: case 244: case 245: case 246: case 247: case 249: case 251: case 252: case 254: case 255: case 257: case 258: case 260: case 277: case 278: case 279: case 280: case 289: case 291: case 295: case 297: case 302: case 304: case 308: case 316: case 318: case 320:
 this.$ = $$[$0]; 
break;
case 6: case 14: case 199: case 283: case 284: case 286: case 292: case 294: case 306: case 329:
 this.$ = $$[$0-1]; 
break;
case 10:
 this.$ = { imports: $$[$0-1], definitions: $$[$0] }; 
break;
case 11:
 this.$ = { definitions: $$[$0] }; 
break;
case 15: case 18: case 22: case 201: case 233: case 273: case 299: case 309: case 321: case 325:
 this.$ = [ $$[$0] ]; 
break;
case 16: case 23: case 234: case 300: case 310: case 322: case 326:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 17:
 this.$ = { 'module_name': $$[$0], 'object_names': $$[$0-2] }; 
break;
case 19: case 274:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 24: case 25:
 this.$ = { definition_class: 'macro' }; 
break;
case 26:

		    this.$ = {
		        definition_class: 'type',
		        descriptor: $$[$0].descriptor,
		        type: $$[$0].type
            };
        
break;
case 27:

		    this.$ = {
		        definition_class: 'type',
                descriptor: $$[$0-1].descriptor,
                type: $$[$0-1].type
            };
        
break;
case 28:

		    this.$ = {
		        definition_class: 'value',
		        descriptor: $$[$0].descriptor,
		        type: $$[$0].type,
		        value: $$[$0].value
            };
        
break;
case 29:

		    this.$ = {
		        definition_class: 'value',
		        descriptor: $$[$0-1].descriptor,
		        type: $$[$0-1].type,
		        value: $$[$0-1].value
            };
        
break;
case 51:
 this.$ = { descriptor: $$[$0-2], type: $$[$0] }; 
break;
case 52:

		    var type = {
                type_class: 'builtin',
                builtin_name: $$[$0].builtin_name
		    };

		    if (    type.builtin_name === 'INTEGER' ||
		            type.builtin_name === 'OCTET STRING' ) {
		        type.constraint_list = $$[$0].constraint_list || null;
		        type.constraint_type = $$[$0].constraint_type || null;
		    } else
		    if (    type.builtin_name === 'SEQUENCE OF' ) {

		    }
		
break;
case 53:

	        this.$ = {
	            type_class: 'defined',
	            defined_name: $$[$0].defined_name,
	            module_name: $$[$0].module_name || null,
	            constraint_type: $$[$0].constraint_type || null,
	            constraint_list: $$[$0].constraint_list || null
	        };
	    
break;
case 54:

	        this.$ = {
                type_class: 'macro',
                macro_name: $$[$0].macro_name,
                macro_data: $$[$0].macro_data
	        };
	    
break;
case 55:

	        this.$ = {
	            defined_name: $$[$0-1],
	            module_name: $$[$0-2],
	            constraint_type: $$[$0].constraint_type,
	            constraint_list: $$[$0].constraint_list
            };
        
break;
case 56:

	        this.$ = {
	            defined_name: $$[$0],
	            module_name: $$[$0-1]
	        };
	    
break;
case 57:

	        this.$ = {
	            defined_name: $$[$0-1],
	            constraint_type: $$[$0].constraint_type,
	            constraint_list: $$[$0].constraint_list
	        };
	    
break;
case 58:
 this.$ = { defined_name: $$[$0] }; 
break;
case 59: case 60: case 61:
 this.$ = { builtin_name: $$[$0] }; 
break;
case 62:

	        this.$ = {
	            builtin_name: 'INTEGER',
	            constraint_type: $$[$0].constraint_type,
	            constraint_list: $$[$0].constraint_list
            };
        
break;
case 79: case 82:
 this.$ = {}; 
break;
case 80:

	        this.$ = {
	            constraint_type: $$[$0-1].constraint_type,
	            constraint_list: $$[$0-1].constraint_list
	        };
	    
break;
case 81:
 this.$ = 'OBJECT IDENTIFIER'; 
break;
case 83:

            this.$ = {
                constraint_type: $$[$0-2].constraint_type,
                constraint_list: $$[$0-2].constraint_list
            };
        
break;
case 171:
 this.$ = {descriptor: $$[$0-3], type: $$[$0-2], value: $$[$0]}; 
break;
case 172:

            this.$ = {
                descriptor: $$[$0-3],
                type: {
                    type_class: 'builtin',
                    builtin_name: 'OBJECT IDENTIFIER'
                },
                value: $$[$0]
            };
        
break;
case 173:

            this.$ = {
                type: {
                    type_class: 'macro',
                    macro_name: $$[$0-2].macro_name,
                    macro_data: $$[$0-2].macro_data
                },
                descriptor: $$[$0-3],
                value: $$[$0]
            };
        
break;
case 175: case 275: case 276:
 this.$ = 'not_implemented'; 
break;
case 178:
 this.$ = {class: 'null', value: $$[$0]}; 
break;
case 179:
 this.$ = {class: 'boolean', value: $$[$0]}; 
break;
case 180:
 this.$ = {class: 'special_real', value: $$[$0]}; 
break;
case 181:
 this.$ = {class: 'number', value: $$[$0]}; 
break;
case 182:
 this.$ = {class: 'binary', value: $$[$0]}; 
break;
case 183:
 this.$ = {class: 'hexadecimal', value: $$[$0]}; 
break;
case 184:
 this.$ = {class: 'string', value: $$[$0]}; 
break;
case 185:
 this.$ = {class: $$[$0].class, value: $$[$0].value}; 
break;
case 186: case 256: case 264: case 270: case 282: case 290: case 303: case 315:
 this.$ = null; 
break;
case 187:
 this.$ = true; 
break;
case 188:
 this.$ = false; 
break;
case 189:
 this.$ = 'plus_infinity'; 
break;
case 190:
 this.$ = 'minus_infinity'; 
break;
case 191:
 this.$ = -1 * parseInt($$[$0]); 
break;
case 192:
 this.$ = parseInt($$[$0]); 
break;
case 196:
 this.$ = {class: 'ambiguous_bit_or_object_identifier', value: $$[$0]}; 
break;
case 197:
 this.$ = {class: 'bit', value: $$[$0]}; 
break;
case 198:
 this.$ = {class: 'object_identifier', value: $$[$0]}; 
break;
case 200: case 232:
 this.$ = []; 
break;
case 202:

			$$[$0-2].push($$[$0]);
			this.$ = $$[$0-2];
		
break;
case 205:
 this.$ = { id: $$[$0] }; 
break;
case 206:
 this.$ = { de: $$[$0] }; 
break;
case 208:
 this.$ = { de: $$[$0-3], id: $$[$0-1] }; 
break;
case 209:
 this.$ = { de: $$[$0-3], id: 'not_implemented' }; 
break;
case 210:
 this.$ = { macro_name: 'trap_type', macro_data: $$[$0] }; 
break;
case 211:
 this.$ = { macro_name: 'textual_convention', macro_data: $$[$0] }; 
break;
case 212:
 this.$ = { macro_name: 'module_identity', macro_data: $$[$0] }; 
break;
case 213:
 this.$ = { macro_name: 'object_identity', macro_data: $$[$0] }; 
break;
case 214:
 this.$ = { macro_name: 'object_type', macro_data: $$[$0] }; 
break;
case 215:
 this.$ = { macro_name: 'notification_type', macro_data: $$[$0] }; 
break;
case 216:
 this.$ = { macro_name: 'object_group', macro_data: $$[$0] }; 
break;
case 217:
 this.$ = { macro_name: 'notification_group', macro_data: $$[$0] }; 
break;
case 218:
 this.$ = { macro_name: 'module_compliance', macro_data: $$[$0] }; 
break;
case 219:
 this.$ = { macro_name: 'agent_capabilities', macro_data: $$[$0] }; 
break;
case 230:

            this.$ = {
                update: $$[$0-4],
                organization: $$[$0-3],
                contact: $$[$0-2],
                description: $$[$0-1],
                revisions: $$[$0]
            };
        
break;
case 235:

            this.$ = {
                status: $$[$0-2],
                description: $$[$0-1],
                reference: $$[$0]
            };
        
break;
case 236:

            this.$ = {
                syntax: $$[$0-7],
                units: $$[$0-6],
                access: $$[$0-5],
                status: $$[$0-4],
                description: $$[$0-3],
                reference: $$[$0-2],
                index: $$[$0-1],
                default_value: $$[$0]
            };
        
break;
case 237: case 240:

            this.$ = {
                objects: $$[$0-3],
                status: $$[$0-2],
                description: $$[$0-1],
                reference: $$[$0]
            };
        
break;
case 238:

		    this.$ = {
		        enterprise: $$[$0-3],
		        variables: $$[$0-2],
		        description: $$[$0-1],
		        reference: $$[$0]
            };
		
break;
case 239:

            this.$ = {
                display_hint: $$[$0-4],
                status: $$[$0-3],
                description: $$[$0-2],
                reference: $$[$0-1],
                syntax: $$[$0]
            };
        
break;
case 241:

            this.$ = {
                notifications: $$[$0-4],
                status: $$[$0-3],
                description: $$[$0-2],
                reference: $$[$0-1]
            };
        
break;
case 242:

            this.$ = {
                status: $$[$0-3],
                description: $$[$0-2],
                reference: $$[$0-1],
                modules: $$[$0]
            };
        
break;
case 243:

            this.$ = {
                product_release: $$[$0-4],
                status: $$[$0-3],
                description: $$[$0-2],
                supports: $$[$0-1]
            };
        
break;
case 248: case 253: case 259: case 296: case 317:
 this.$ = ""; 
break;
case 250:
 this.$ = { revision: $$[$0-2], description: $$[$0] }; 
break;
case 261: case 265:
 this.$ = { access_type: 'access', access_level: $$[$0] }; 
break;
case 262: case 266:
 this.$ = { access_type: 'max_access', access_level: $$[$0] }; 
break;
case 263: case 267:
 this.$ = { access_type: 'min_access', access_level: $$[$0] }; 
break;
case 268: case 271:
 this.$ = { part_type: 'index', value: $$[$0-1] }; 
break;
case 269: case 272:
 this.$ = { part_type: 'augments', value: $$[$0-1] }; 
break;
case 281:
 this.$ = $$[$0-3]; 
break;
case 285: case 293: case 305: case 307: case 319: case 324: case 328:
 this.$ = [ ]; 
break;
case 287:
 this.$ = $$[$0] ? [ $$[$0] ] : [ ]; 
break;
case 288:
 $$[$0] && $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 298:
 this.$ = $$[$0-2]; 
break;
case 301:

		    this.$ = {
		        module_identifier: $$[$0-2],
		        mandatory_groups: $$[$0-1],
		        compliances: $$[$0]
		    };
		
break;
case 311:
 this.$ = { compliance_class: 'group', compliance: $$[$0] }; 
break;
case 312:
 this.$ = { compliance_class: 'object', compliance: $$[$0] }; 
break;
case 313:
 this.$ = { descriptor: $$[$0-1], description: $$[$0] }; 
break;
case 314:

            this.$ = {
                descriptor: $$[$0-4],
                syntax: $$[$0-3],
                write_syntax: $$[$0-2],
                access: $$[$0-1],
                description: $$[$0]
            };
        
break;
case 323:

            this.$ = {
                module_name: $$[$0-5],
                includes: $$[$0-4],
                variations: $$[$0-3]
            };
        
break;
case 327:

		    this.$ = {
		        descriptor: $$[$0-6],
		        syntax: $$[$0-5],
		        write_syntax: $$[$0-4],
		        access: $$[$0-3],
		        creation: $$[$0-2],
		        default_value: $$[$0-1],
		        description: $$[$0]
		    };
		
break;
}
},
table: [{3:1,4:2,11:$V0},{1:[3]},{5:[1,4]},o($V1,[2,5],{12:5,155:6,78:$V2}),{6:8,7:[1,9],15:[1,10],17:[1,11]},o($V1,[2,6]),o([5,7,10,11,23,50,126,171,172,173,174,175,176,177,178,179,180,240,245,250],[2,198]),{11:$V3,80:[1,13],91:$V4,157:12,158:14,160:17},{7:[1,18]},{8:[1,19]},{16:[1,20]},{16:[1,21]},o($V5,[2,203],{159:23,29:[1,24],80:[1,22]}),o($V6,[2,200]),o($V7,[2,201]),o($V7,[2,205]),o($V7,[2,206],{40:[1,25]}),o($V7,[2,207]),{8:[1,26]},{9:28,10:[1,27],11:$V8,18:29,19:30,24:$V9,30:38,31:32,32:33,33:34,34:35,35:36,171:$Va,172:$Vb,173:$Vc,174:$Vd,175:$Ve,176:$Vf,177:$Vg,178:$Vh,179:$Vi,180:$Vj},{7:[2,8]},{7:[2,9]},o($V6,[2,199]),{11:$V3,91:$V4,158:49,160:17},o($V5,[2,204]),{11:$Vk,13:52,91:[1,50],110:51},{9:54,10:[1,55],11:$V8,18:29,19:30,24:$V9,30:38,31:32,32:33,33:34,34:35,35:36,171:$Va,172:$Vb,173:$Vc,174:$Vd,175:$Ve,176:$Vf,177:$Vg,178:$Vh,179:$Vi,180:$Vj},{1:[2,3]},{10:[1,56]},{11:$V8,19:57,30:38,31:32,32:33,33:34,34:35,35:36,171:$Va,172:$Vb,173:$Vc,174:$Vd,175:$Ve,176:$Vf,177:$Vg,178:$Vh,179:$Vi,180:$Vj},{10:[2,11],11:$V8,30:38,31:58,32:33,33:34,34:35,35:36,171:$Va,172:$Vb,173:$Vc,174:$Vd,175:$Ve,176:$Vf,177:$Vg,178:$Vh,179:$Vi,180:$Vj},{11:$Vl,22:61,25:59,26:60,28:62,30:64,171:$Va,172:$Vb,173:$Vc,174:$Vd,175:$Ve,176:$Vf,177:$Vg,178:$Vh,179:$Vi,180:$Vj},o($Vm,[2,22]),o($Vm,[2,24],{23:[1,65]}),o($Vm,[2,26],{23:[1,66]}),o($Vm,[2,28],{23:[1,67]}),{36:[1,68]},{7:[1,69],11:$Vn,13:101,36:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:70,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:71,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,139:72,161:103,162:104,163:77,164:78,165:79,166:80,167:81,168:82,169:83,170:84,171:[1,105],172:[1,106],173:[1,107],174:[1,108],175:$VD,176:$VE,177:[1,109],178:[1,110],179:[1,111],180:[1,112]},o([10,11,23,36,171,172,173,174,175,176,177,178,179,180],[2,32]),o($VF,[2,220]),o($VF,[2,221]),o($VF,[2,222]),o($VF,[2,223]),o($VF,[2,224]),o($VF,[2,225]),o($VF,[2,226]),o($VF,[2,227]),o($VF,[2,228]),o($VF,[2,229]),o($V7,[2,202]),{41:[1,129]},{41:[1,130]},{11:[1,131]},o($VG,$VH,{14:$VI}),{10:[1,133]},{1:[2,2]},{1:[2,4]},{10:[2,10],11:$V8,30:38,31:58,32:33,33:34,34:35,35:36,171:$Va,172:$Vb,173:$Vc,174:$Vd,175:$Ve,176:$Vf,177:$Vg,178:$Vh,179:$Vi,180:$Vj},o($Vm,[2,23]),{11:$Vl,22:61,23:[1,134],26:135,28:62,30:64,171:$Va,172:$Vb,173:$Vc,174:$Vd,175:$Ve,176:$Vf,177:$Vg,178:$Vh,179:$Vi,180:$Vj},o($VJ,[2,15]),{27:[1,136],29:[1,137]},o($VK,[2,18]),o($VK,[2,20]),o($VK,[2,21]),o($Vm,[2,25]),o($Vm,[2,27]),o($Vm,[2,29]),{7:[1,138]},{11:$Vn,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:139,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},{7:[1,141]},{7:[1,142]},{7:[1,143]},o($VL,[2,52]),o($VL,[2,53]),o($VL,[2,54]),{51:[1,144]},{7:[2,212]},{7:[2,213]},{7:[2,214]},{7:[2,215]},{7:[2,216]},{7:[2,217]},{7:[2,218]},{7:[2,219]},o($VL,[2,59]),o($VL,[2,60]),o($VL,[2,61]),o($VL,[2,62]),o($VL,[2,64]),o($VL,[2,65]),o($VL,[2,66]),o($VL,[2,67]),o($VL,[2,68]),o($VL,[2,69]),o($VL,[2,70]),o($VL,[2,71]),o($VL,[2,72]),o($VL,[2,73]),o($VL,[2,74]),o($VL,[2,75]),{11:[1,145]},o($VL,$VM,{57:146,86:148,75:149,14:$VI,40:$VN,78:$VO,87:$VP}),o($VL,[2,210]),o($VL,[2,211]),{181:152,205:[1,153]},{188:154,210:$VQ},{190:156,213:$VR},{196:158,210:[2,285],230:[1,159]},{200:160,230:[1,161]},{201:162,238:[1,163]},{188:164,210:$VQ},{203:[1,165]},o($VL,[2,76]),o($VL,[2,77]),o($VL,[2,78]),o($VL,[2,79],{86:148,75:149,57:166,40:$VN,78:$VO}),{49:[1,167]},{49:[1,168]},o($VL,[2,86],{86:148,75:149,57:169,40:$VN,78:$VO}),{40:$VN,75:172,78:[1,170],81:[1,171]},{78:[1,173],81:[1,175],83:174,125:$VS},{78:[1,177]},{78:$VO,86:178},{11:$Vn,13:101,15:[1,181],17:[1,182],43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:179,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,89:180,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},o($VL,[2,108],{98:[1,183]}),{197:184,233:[1,185]},{199:186,210:[2,296],237:[1,187]},{91:[1,188],93:189,94:[1,190],95:[1,191],96:[1,192]},o($V7,[2,208]),o($V7,[2,209]),o($VG,[2,176]),o($VT,[2,7]),{1:[2,1]},o($VT,[2,14]),o($VJ,[2,16]),{4:193,11:$V0},{11:$Vl,28:194,30:64,171:$Va,172:$Vb,173:$Vc,174:$Vd,175:$Ve,176:$Vf,177:$Vg,178:$Vh,179:$Vi,180:$Vj},{8:[1,196],11:[1,198],13:197,37:195},o($VU,[2,51]),o($VL,[2,63]),{11:$Vk,13:52,46:$VV,52:$VW,78:$V2,91:$VX,105:199,109:$VY,110:201,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},{12:221,78:$V2,155:6},{12:222,78:$V2,155:6},o($VL,[2,81]),o($VL,[2,56],{86:148,75:149,57:223,40:$VN,78:$VO}),o($VL,[2,57]),{11:$Vn,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:224,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},o($V31,[2,121]),o($V31,[2,122]),{11:$V41,106:225,107:226},{11:$Vk,13:52,27:$V51,46:$VV,52:$VW,78:$V2,83:231,91:$VX,105:239,109:$VY,110:201,111:228,112:229,113:230,114:232,115:233,116:234,119:235,123:$V61,125:$VS,126:$V71,127:$V81,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},{182:241,206:[1,242]},{52:[1,243]},{184:244,208:$V91},{11:[1,246]},o($Va1,[2,259],{191:247,216:[1,248]}),{11:$Vn,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:249,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},{188:250,210:$VQ},{78:[1,251]},{188:252,210:$VQ},{78:[1,253]},{188:254,210:$VQ},{78:[1,255]},{184:256,208:$V91},{188:257,210:$VQ},o($VL,[2,80]),o($VL,[2,82],{75:258,40:$VN}),o($VL,[2,84],{86:148,75:149,57:259,40:$VN,78:$VO}),o($VL,[2,87]),{11:$Vb1,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:264,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,79:260,80:[1,261],82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,100:262,102:$Vc1,161:103,162:104,175:$VD,176:$VE},{11:$Vn,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:266,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},{81:[1,267]},{11:$Vb1,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:264,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,79:268,80:[1,269],82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,100:262,102:$Vc1,161:103,162:104,175:$VD,176:$VE},{81:[1,270]},{11:$Vn,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:271,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},{40:$Vd1,117:272},{11:$Vb1,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:264,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,79:274,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,100:262,102:$Vc1,161:103,162:104,175:$VD,176:$VE},o($VL,[2,97]),o($VL,[2,99]),{11:$Vn,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:275,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},o($Ve1,[2,106]),o($Ve1,[2,107]),{99:[1,276]},o($Vf1,[2,293],{198:277,235:[1,278]}),{11:$Vk,13:52,46:$VV,52:$VW,78:$V2,91:$VX,105:279,109:$VY,110:201,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},{188:280,210:$VQ},{52:[1,281]},{92:[1,282]},{91:[1,283]},{91:[2,103]},{91:[2,104]},{91:[2,105]},o($VJ,[2,17]),o($VK,[2,19]),o($VU,[2,30]),{10:[1,285],38:[1,284]},{11:[1,287],30:38,35:286,171:$Va,172:$Vb,173:$Vc,174:$Vd,175:$Ve,176:$Vf,177:$Vg,178:$Vh,179:$Vi,180:$Vj},{14:$VI},o($VU,[2,171]),o($VG,[2,174]),o($VG,[2,175]),o($Vg1,[2,178]),o($Vg1,[2,179]),o($Vg1,[2,180]),o($Vg1,[2,181]),o($Vg1,[2,182]),o($Vg1,[2,183]),o($Vg1,[2,184]),o($Vg1,[2,185]),o($Vg1,[2,186]),o($Vg1,[2,187]),o($Vg1,[2,188]),o($Vg1,[2,189]),o($Vg1,[2,190]),{91:[1,288]},o($Vg1,[2,192]),o($Vg1,[2,193]),o($Vg1,[2,194]),o($Vg1,[2,195]),o($Vg1,[2,196]),o($VU,[2,172]),o($VU,[2,173]),o($VL,[2,55]),o($VL,[2,98]),{29:[1,290],80:[1,289]},o($Vh1,[2,124]),{40:[1,291]},{41:[1,292],42:[1,293]},o($Vi1,[2,131]),o($Vi1,[2,133]),o($Vi1,[2,134]),o($Vi1,[2,135]),o($Vi1,[2,136]),o($Vi1,[2,137]),o($Vi1,[2,142],{120:294,87:[1,295],121:[1,296]}),{40:$Vd1,117:297},{11:$Vn,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:298,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},{102:[1,300],128:[1,299]},o($Vj1,[2,147]),o($Vj1,[2,148]),{183:301,207:[1,302]},{52:[1,303]},{206:[2,244]},{7:$Vk1,189:304,212:$Vl1},{52:[1,306]},o([7,208,212,222,224,229],[2,251]),{192:307,217:[1,308],218:[1,309],219:[1,310]},{52:[1,311]},o($VL,[2,255]),{184:312,208:$V91},{11:$Vm1,46:$VV,52:$VW,78:$V2,91:$VX,109:$VY,140:316,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220,231:313,232:314},{184:317,208:$V91},{11:$Vm1,46:$VV,52:$VW,78:$V2,91:$VX,109:$VY,140:316,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220,231:318,232:314},{184:319,208:$V91},{11:$Vm1,46:$VV,52:$VW,78:$V2,91:$VX,109:$VY,140:316,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220,231:320,232:314},{189:321,212:$Vl1,240:$Vk1},{184:322,208:$V91},o($VL,[2,83]),o($VL,[2,85]),{29:$Vn1,80:[1,323]},o($VL,[2,89]),o($Vh1,[2,110]),o([29,80,103,104],$VM,{54:73,55:74,56:75,58:85,59:86,60:87,61:88,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,13:101,161:103,162:104,88:124,62:140,57:146,86:148,75:149,53:325,11:$Vn,14:$VI,40:$VN,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,76:$Vw,77:$Vx,78:$VO,82:$Vy,84:$Vz,85:$VA,87:$VP,90:$VB,97:$VC,102:[1,326],175:$VD,176:$VE}),o($Vh1,[2,115],{101:327,103:$Vo1,104:$Vp1}),{81:[1,330]},o($VL,[2,90]),{11:$Vn,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:331,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},{29:$Vn1,80:[1,332]},o($VL,[2,93]),{11:$Vn,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:333,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},o($VL,[2,95]),o($Vq1,[2,151]),{11:$Vk,13:52,46:$VV,52:$VW,78:$V2,91:$VX,105:239,109:$VY,110:201,113:335,118:334,119:235,123:$V61,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},{29:$Vn1,80:[1,336]},o($VL,[2,100]),{11:[1,337]},o([7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,212,216,217,218,219,229,252,263],$Vr1,{193:338,208:$Vs1}),{78:[1,340]},o([7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,212,216,217,218,219,229,235,252,263],[2,291]),{184:341,208:$V91},{210:[2,297]},o($Vt1,[2,101]),{92:[1,342]},{10:[1,343]},o($VU,[2,34]),o($VU,[2,35]),o($VU,$Vo),o($Vg1,[2,191]),o($V31,[2,123]),{11:$V41,107:344},{11:$Vk,13:52,91:[1,347],108:345,109:[1,346],110:348},o([7,10,11,23,29,41,42,80,81,103,104,137,138,171,172,173,174,175,176,177,178,179,180,208,216,217,218,219,229,252,263],[2,130]),{11:$Vk,13:52,27:$V51,46:$VV,52:$VW,78:$V2,83:231,91:$VX,105:239,109:$VY,110:201,112:349,113:230,114:232,115:233,116:234,119:235,123:$V61,125:$VS,126:$V71,127:$V81,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},o($Vi1,[2,141]),{121:[1,350]},{11:$Vk,13:52,46:$VV,52:$VW,78:$V2,87:[1,351],91:$VX,105:353,109:$VY,110:201,122:352,124:$Vu1,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},o($Vi1,[2,152]),o($Vi1,[2,153]),{40:$VN,57:355,75:149,78:$VO,86:148},{78:[1,357],129:356},{184:358,208:$V91},{52:[1,359]},{207:[2,245]},{7:[2,235]},{52:[1,360]},o([7,50,209,212,213,240,250,257],[2,247]),{188:361,210:$VQ},{11:[1,362]},{11:[1,363]},{11:[1,364]},o($Va1,[2,260]),{7:$Vk1,189:365,212:$Vl1},{29:$Vv1,80:[1,366]},o($Vh1,[2,287]),o($Vw1,[2,289]),o($Vw1,[2,290]),{7:$Vk1,189:368,212:$Vl1},{29:$Vv1,80:[1,369]},{7:$Vk1,189:370,212:$Vl1},{29:$Vv1,80:[1,371]},{202:372,239:373,240:$Vx1},o($Vy1,$Vk1,{189:375,212:$Vl1}),o($VL,[2,88]),{11:$Vb1,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:264,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,100:376,102:$Vc1,161:103,162:104,175:$VD,176:$VE},o($Vh1,[2,113],{101:377,103:$Vo1,104:$Vp1}),{81:[1,378]},o($Vh1,[2,114]),o($Vh1,[2,118]),{11:[1,380],13:52,46:$VV,52:$VW,78:$V2,91:$VX,105:379,109:$VY,110:201,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},{11:$Vn,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:381,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},o($VL,[2,91]),o($VL,[2,92]),o($VL,[2,94]),{41:[1,382],42:[1,383]},o($Vi1,[2,139]),o($VL,[2,96]),o($VL,[2,109]),o($VL,$Vk1,{189:384,212:$Vl1}),{52:[1,385]},{11:$Vm1,46:$VV,52:$VW,78:$V2,91:$VX,109:$VY,140:316,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220,231:386,232:314},{189:387,212:$Vl1,213:$Vk1},o($Vt1,[2,102]),o($VU,[2,33]),o($Vh1,[2,125]),{41:[1,388]},{91:[1,389]},{41:[2,128]},{41:[2,129]},o($Vi1,[2,132]),{11:$Vk,13:52,46:$VV,52:$VW,78:$V2,87:[1,390],91:$VX,105:353,109:$VY,110:201,122:391,124:$Vu1,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},{11:$Vk,13:52,46:$VV,52:$VW,78:$V2,91:$VX,105:353,109:$VY,110:201,122:392,124:$Vu1,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},o($Vi1,[2,146]),o($Vi1,[2,149]),o($Vi1,[2,150]),o($Vi1,[2,154]),o($Vi1,[2,155]),{11:$Vz1,40:$VN,57:398,75:149,78:$VO,86:148,103:$VA1,130:393,131:394,133:[1,395],135:397,136:399,137:$VB1,138:$VC1},{7:[2,232],185:403,186:404,187:405,209:$VD1},{208:[2,246]},o([7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,213,216,217,218,219,222,224,229,240,252,257,263],[2,254]),o([7,212,222,224,229],$Vr1,{193:407,208:$Vs1}),{210:[2,261]},{210:[2,262]},{210:[2,263]},{7:[2,237]},{210:[2,286]},{11:$Vm1,46:$VV,52:$VW,78:$V2,91:$VX,109:$VY,140:316,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220,232:408},{7:[2,240]},{210:[2,284]},{7:[2,241]},{210:[2,298]},{7:[2,242],239:409,240:$Vx1},o($VE1,[2,299]),o($VF1,[2,303],{241:410,4:411,11:$V0}),{7:[2,319],204:412,255:413,256:414,257:$VG1},o($Vh1,[2,111]),o($Vh1,[2,112]),{11:$Vn,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:416,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},o($Vh1,[2,119]),o($Vh1,$VH,{13:52,140:200,110:201,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,155:220,105:417,11:$Vk,14:$VI,46:$VV,52:$VW,78:$V2,91:$VX,109:$VY,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21}),o($Vh1,[2,117]),o($Vq1,[2,138]),{11:$Vk,13:52,46:$VV,52:$VW,78:$V2,91:$VX,105:239,109:$VY,110:201,113:418,119:235,123:$V61,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},o($VL,[2,238]),o([7,10,11,23,29,41,42,80,103,104,171,172,173,174,175,176,177,178,179,180,208,212,216,217,218,219,222,224,229,252,263],[2,249]),{29:$Vv1,80:[1,419]},{190:420,213:$VR},o($Vh1,[2,126]),{41:[2,127]},{11:$Vk,13:52,46:$VV,52:$VW,78:$V2,91:$VX,105:353,109:$VY,110:201,122:421,124:$Vu1,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},o($Vi1,[2,144]),o($Vi1,[2,145]),{80:[1,422]},{29:$VH1,80:[2,158],132:423},{29:$VH1,132:425},o($Vh1,[2,163],{86:148,75:149,57:398,136:399,135:426,40:$VN,78:$VO,103:$VA1,137:$VB1,138:$VC1}),o($Vh1,[2,164]),o($Vh1,[2,166],{136:427,103:$VA1,137:$VB1,138:$VC1}),o($Vh1,[2,167]),o($Vh1,[2,168]),o($Vh1,[2,169]),o($Vh1,[2,170]),{7:[2,230]},{7:[2,231],187:428,209:$VD1},o($VI1,[2,233]),{52:[1,429]},o([7,222,224,229],$Vk1,{189:430,212:$Vl1}),o($Vh1,[2,288]),o($VE1,[2,300]),o($VJ1,[2,305],{242:431,245:[1,432]}),o($VF1,[2,304]),{7:[2,243]},{7:[2,320],256:433,257:$VG1},o($Vy1,[2,321]),{4:435,11:$V0,244:434},o($Vh1,[2,116]),o($Vh1,[2,120]),o($Vi1,[2,140]),o($Vf1,[2,294]),o($VL,[2,239]),o($Vi1,[2,143]),o($Vi1,[2,156]),{80:[2,157]},{11:$Vz1,40:$VN,57:398,75:149,78:$VO,86:148,103:$VA1,131:436,134:[1,437],135:397,136:399,137:$VB1,138:$VC1},{80:[2,159]},o($Vh1,[2,162]),o($Vh1,[2,165]),o($VI1,[2,234]),{208:[1,438]},o($VK1,[2,270],{194:439,222:[1,440],224:[1,441]}),o($VE1,[2,307],{243:442,246:443,247:444,248:445,249:446,50:$VL1,250:$VM1}),{78:[1,449]},o($Vy1,[2,322]),{126:[1,450]},{126:[2,302]},{80:[2,160]},{29:[1,451]},{52:[1,452]},{7:$VN1,195:453,229:$VO1},{78:[1,455]},{78:[1,456]},o($VE1,[2,301]),o($VE1,[2,308],{248:445,249:446,247:457,50:$VL1,250:$VM1}),o($VJ1,[2,309]),o($VJ1,[2,311]),o($VJ1,[2,312]),{11:$Vm1,46:$VV,52:$VW,78:$V2,91:$VX,109:$VY,140:316,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220,232:458},{11:$Vm1,46:$VV,52:$VW,78:$V2,91:$VX,109:$VY,140:316,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220,232:459},{11:$Vm1,46:$VV,52:$VW,78:$V2,91:$VX,109:$VY,140:316,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220,231:460,232:314},{78:[1,461]},{11:$Vz1,40:$VN,57:398,75:149,78:$VO,86:148,103:$VA1,131:462,135:397,136:399,137:$VB1,138:$VC1},o($VI1,[2,250]),{7:[2,236]},{78:[1,463]},{11:$Vk,13:52,43:$Vp,46:$VV,48:$Vu,50:$Vv,52:$VW,61:469,62:471,63:470,78:$V2,91:$VX,105:466,109:$VY,110:201,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220,223:464,225:465,226:$VP1,227:468},{11:$Vk,13:52,46:$VV,52:$VW,78:$V2,91:$VX,105:472,109:$VY,110:201,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},o($VJ1,[2,310]),{184:473,208:$V91},o([208,217,218,219,252],$VQ1,{214:474,213:$VR1}),{29:$Vv1,80:[1,476]},{11:$Vm1,46:$VV,52:$VW,78:$V2,91:$VX,109:$VY,140:316,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220,231:477,232:314},{80:[2,161]},{11:$Vk,13:52,46:$VV,52:$VW,78:$V2,91:$VX,105:478,109:$VY,110:201,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},{29:[1,480],80:[1,479]},o($Vh1,[2,273]),o($Vh1,[2,275]),{11:$Vk,13:52,46:$VV,52:$VW,78:$V2,91:$VX,105:481,109:$VY,110:201,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220},o($Vh1,[2,277]),o($Vh1,[2,278]),o($Vh1,[2,279]),o($Vh1,[2,280]),{80:[1,482]},o($VJ1,[2,313]),o([208,217,218,219],$VS1,{251:483,252:$VT1}),{11:$Vn,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:485,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},o($VJ1,[2,306]),{29:$Vv1,80:[1,486]},{80:[1,487]},o($VK1,[2,271]),{11:$Vk,13:52,43:$Vp,46:$VV,48:$Vu,50:$Vv,52:$VW,61:469,62:471,63:470,78:$V2,91:$VX,105:466,109:$VY,110:201,140:200,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220,225:488,226:$VP1,227:468},o($Vh1,[2,276]),o($VK1,[2,272]),{208:$VU1,217:$VV1,218:$VW1,219:$VX1,220:489},{11:$Vn,13:101,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,50:$Vv,53:493,54:73,55:74,56:75,58:85,59:86,60:87,61:88,62:140,63:89,64:90,65:91,66:92,67:93,68:94,69:95,70:96,71:97,72:98,73:99,74:100,76:$Vw,77:$Vx,82:$Vy,84:$Vz,85:$VA,88:124,90:$VB,97:$VC,161:103,162:104,175:$VD,176:$VE},o($VY1,[2,257]),o($Vy1,[2,324],{258:494,259:495,260:[1,496],261:$VZ1}),o([7,208],[2,283]),o($Vh1,[2,274]),{184:498,208:$V91},{11:[1,499]},{11:[1,500]},{11:[1,501]},o($V_1,[2,316]),o($Vy1,[2,323]),o($Vy1,[2,325]),{259:502,261:$VZ1},{11:[1,503]},o($VJ1,[2,314]),o($V$1,[2,265]),o($V$1,[2,266]),o($V$1,[2,267]),o($Vy1,[2,326]),o($VY1,$VQ1,{214:504,213:$VR1}),o($V_1,$VS1,{251:505,252:$VT1}),o($V$1,$VU1,{220:506,217:$VV1,218:$VW1,219:$VX1}),o($V02,[2,328],{262:507,263:[1,508]}),{195:509,208:$VN1,229:$VO1},{78:[1,510]},{184:511,208:$V91},{11:$Vm1,46:$VV,52:$VW,78:$V2,91:$VX,109:$VY,140:316,141:202,142:203,143:204,144:205,145:206,146:207,147:208,148:209,149:$VZ,150:$V_,151:$V$,152:$V01,153:$V11,154:$V21,155:220,231:512,232:314},o($Vy1,[2,327]),{29:$Vv1,80:[1,513]},o($V02,[2,329])],
defaultActions: {20:[2,8],21:[2,9],27:[2,3],55:[2,2],56:[2,4],77:[2,212],78:[2,213],79:[2,214],80:[2,215],81:[2,216],82:[2,217],83:[2,218],84:[2,219],133:[2,1],190:[2,103],191:[2,104],192:[2,105],243:[2,244],281:[2,297],303:[2,245],304:[2,235],347:[2,128],348:[2,129],359:[2,246],362:[2,261],363:[2,262],364:[2,263],365:[2,237],366:[2,286],368:[2,240],369:[2,284],370:[2,241],371:[2,298],389:[2,127],403:[2,230],412:[2,243],423:[2,157],425:[2,159],435:[2,302],436:[2,160],453:[2,236],462:[2,161]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:return 133;
break;
case 3:return 121;
break;
case 4:return 14;
break;
case 5:return 29;
break;
case 6:return 23;
break;
case 7:return 40;
break;
case 8:return 41;
break;
case 9:return 78;
break;
case 10:return 80;
break;
case 11:return 90;
break;
case 12:return 92;
break;
case 13:return 109;
break;
case 14:return 87;
break;
case 15:return 42;
break;
case 16:return 7;
break;
case 17:return 5;
break;
case 18:return 15;
break;
case 19:return 17;
break;
case 20:return 16;
break;
case 21:return 8;
break;
case 22:return 10;
break;
case 23:return 21;
break;
case 24:return 24;
break;
case 25:return 27;
break;
case 26:return 'MACRO  ';
break;
case 27:return 43;
break;
case 28:return 44;
break;
case 29:return 45;
break;
case 30:return 46;
break;
case 31:return 47;
break;
case 32:return 48;
break;
case 33:return 49;
break;
case 34:return 85;
break;
case 35:return 77;
break;
case 36:return 82;
break;
case 37:return 81;
break;
case 38:return 84;
break;
case 39:return 94;
break;
case 40:return 95;
break;
case 41:return 96;
break;
case 42:return 97;
break;
case 43:return 98;
break;
case 44:return 99;
break;
case 45:return 230;
break;
case 46:return 177;
break;
case 47:return 172;
break;
case 48:return 173;
break;
case 49:return 50;
break;
case 50:return 51;
break;
case 51:return 126;
break;
case 52:return 219;
break;
case 53:return 123;
break;
case 54:return 218;
break;
case 55:return 124;
break;
case 56:return 125;
break;
case 57:return 127;
break;
case 58:return 102;
break;
case 59:return 128;
break;
case 60:return 137;
break;
case 61:return 138;
break;
case 62:return 103;
break;
case 63:return 104;
break;
case 64:return 149;
break;
case 65:return 150;
break;
case 66:return 151;
break;
case 67:return 152;
break;
case 68:return 171;
break;
case 69:return 174;
break;
case 70:return 175;
break;
case 71:return 176;
break;
case 72:return 178;
break;
case 73:return 179;
break;
case 74:return 180;
break;
case 75:return 205;
break;
case 76:return 206;
break;
case 77:return 207;
break;
case 78:return 208;
break;
case 79:return 209;
break;
case 80:return 210;
break;
case 81:return 212;
break;
case 82:return 213;
break;
case 83:return 76;
break;
case 84:return 216;
break;
case 85:return 217;
break;
case 86:return 222;
break;
case 87:return 224;
break;
case 88:return 226;
break;
case 89:return 229;
break;
case 90:return 233;
break;
case 91:return 235;
break;
case 92:return 237;
break;
case 93:return 238;
break;
case 94:return 240;
break;
case 95:return 245;
break;
case 96:return 250;
break;
case 97:return 252;
break;
case 98:return 254;
break;
case 99:return 257;
break;
case 100:return 261;
break;
case 101:return 263;
break;
case 102:return 153;
break;
case 103:return 154;
break;
case 104:return 52;
break;
case 105:return 11;
break;
case 106:return 91;
break;
}
},
rules: [/^(?:[ \t\n\r]+)/,/^(?:--[^\n\r]*)/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:-)/,/^(?:<)/,/^(?:\|)/,/^(?:::=)/,/^(?:DEFINITIONS\b)/,/^(?:EXPLICIT\b)/,/^(?:IMPLICIT\b)/,/^(?:TAGS\b)/,/^(?:BEGIN\b)/,/^(?:END\b)/,/^(?:EXPORTS\b)/,/^(?:IMPORTS\b)/,/^(?:FROM\b)/,/^(?:MACRO\b)/,/^(?:INTEGER\b)/,/^(?:REAL\b)/,/^(?:BOOLEAN\b)/,/^(?:NULL\b)/,/^(?:BIT\b)/,/^(?:OCTET\b)/,/^(?:STRING\b)/,/^(?:ENUMERATED\b)/,/^(?:SEQUENCE\b)/,/^(?:SET\b)/,/^(?:OF\b)/,/^(?:CHOICE\b)/,/^(?:UNIVERSAL\b)/,/^(?:APPLICATION\b)/,/^(?:PRIVATE\b)/,/^(?:ANY\b)/,/^(?:DEFINED\b)/,/^(?:BY\b)/,/^(?:OBJECTS\b)/,/^(?:OBJECT-GROUP\b)/,/^(?:OBJECT-IDENTITY\b)/,/^(?:OBJECT-TYPE\b)/,/^(?:OBJECT\b)/,/^(?:IDENTIFIER\b)/,/^(?:INCLUDES\b)/,/^(?:MIN-ACCESS\b)/,/^(?:MIN\b)/,/^(?:MAX-ACCESS\b)/,/^(?:MAX\b)/,/^(?:SIZE\b)/,/^(?:WITH\b)/,/^(?:COMPONENTS\b)/,/^(?:COMPONENT\b)/,/^(?:PRESENT\b)/,/^(?:ABSENT\b)/,/^(?:OPTIONAL\b)/,/^(?:DEFAULT\b)/,/^(?:TRUE\b)/,/^(?:FALSE\b)/,/^(?:PLUS-INFINITY\b)/,/^(?:MINUS-INFINITY\b)/,/^(?:MODULE-IDENTITY\b)/,/^(?:NOTIFICATION-TYPE\b)/,/^(?:TRAP-TYPE\b)/,/^(?:TEXTUAL-CONVENTION\b)/,/^(?:NOTIFICATION-GROUP\b)/,/^(?:MODULE-COMPLIANCE\b)/,/^(?:AGENT-CAPABILITIES\b)/,/^(?:LAST-UPDATED\b)/,/^(?:ORGANIZATION\b)/,/^(?:CONTACT-INFO\b)/,/^(?:DESCRIPTION\b)/,/^(?:REVISION\b)/,/^(?:STATUS\b)/,/^(?:REFERENCE\b)/,/^(?:SYNTAX\b)/,/^(?:BITS\b)/,/^(?:UNITS\b)/,/^(?:ACCESS\b)/,/^(?:INDEX\b)/,/^(?:AUGMENTS\b)/,/^(?:IMPLIED\b)/,/^(?:DEFVAL\b)/,/^(?:ENTERPRISE\b)/,/^(?:VARIABLES\b)/,/^(?:DISPLAY-HINT\b)/,/^(?:NOTIFICATIONS\b)/,/^(?:MODULE\b)/,/^(?:MANDATORY-GROUPS\b)/,/^(?:GROUP\b)/,/^(?:WRITE-SYNTAX\b)/,/^(?:PRODUCT-RELEASE\b)/,/^(?:SUPPORTS\b)/,/^(?:VARIATION\b)/,/^(?:CREATION-REQUIRES\b)/,/^(?:\[0-1\]\*(B|b))/,/^(?:\[0-9A-Fa-f\]\*(H|h))/,/^(?:"[^"]*")/,/^(?:[a-zA-Z][a-zA-Z0-9-_]*)/,/^(?:[0-9]+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}